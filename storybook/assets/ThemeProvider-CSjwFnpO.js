import{j as n}from"./jsx-runtime-DiklIkkE.js";import{r as t}from"./index-DRjF_FHU.js";import{o as p}from"./styled-components.browser.esm-Dz5yS7sT.js";import{l as u,d as f}from"./theme-_dwbflR3.js";const g=t.createContext(void 0),T=({initialTheme:i="light",useSystemPreference:a=!1,children:l})=>{const[o,r]=t.useState(i);t.useEffect(()=>{if(typeof window>"u")return;const e=localStorage.getItem("goblin-theme");if(e)r(e);else if(a){const c=window.matchMedia("(prefers-color-scheme: dark)").matches;r(c?"dark":"light")}},[a]),t.useEffect(()=>{typeof window>"u"||localStorage.setItem("goblin-theme",o)},[o]);const m=t.useCallback(()=>{r(e=>e==="light"?"dark":"light")},[]),d=t.useCallback(e=>{r(e)},[]),s=o==="light"?u:f,h={theme:s,toggleTheme:m,setTheme:d};return n.jsx(g.Provider,{value:h,children:n.jsx(p,{theme:s,children:l})})};T.__docgenInfo={description:`ThemeProvider component that manages theme state and provides it to children

@param props - Component props
@returns JSX.Element`,methods:[],displayName:"ThemeProvider",props:{initialTheme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Initial theme mode. Default is light",defaultValue:{value:"'light'",computed:!1}},useSystemPreference:{required:!1,tsType:{name:"boolean"},description:"Use system preference for theme if true",defaultValue:{value:"false",computed:!1}},children:{required:!0,tsType:{name:"ReactNode"},description:"Children components that will have access to the theme"}}};export{T};
