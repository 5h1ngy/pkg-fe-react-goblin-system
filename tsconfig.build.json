{
    "compilerOptions": {
        // ðŸ“Œ Specifica le librerie che TypeScript deve includere
        "lib": [
            "ES2020", // âœ… Usa le funzionalitÃ  di JavaScript ES2020 (es. Optional Chaining, Nullish Coalescing)
            "DOM", // âœ… Permette di usare le API del DOM (es. document.querySelector)
            "DOM.Iterable" // âœ… Abilita l'iterazione su NodeList, HTMLCollection, ecc. (es. document.querySelectorAll().forEach())
        ],
        // ðŸ“Œ Definisce la versione ECMAScript a cui compilare il codice
        "target": "ES2020", // âœ… Supporta funzioni moderne di JavaScript come async/await, Optional Chaining (?.) e Nullish Coalescing (??)
        // ðŸ“Œ Definisce il sistema di moduli da usare
        "module": "ESNext", // âœ… Usa import/export nativi e migliora la tree shaking nei bundler come Rollup/Webpack
        // ðŸ“Œ Configura il supporto per JSX (React)
        "jsx": "react-jsx", // âœ… Usa la sintassi JSX senza bisogno di importare React manualmente (React 17+)
        // ðŸ“Œ Genera file di dichiarazione `.d.ts` per supportare l'autocompletamento nei progetti che importano questa libreria
        "declaration": true,
        // ðŸ“Œ Specifica la directory in cui salvare i file di dichiarazione `.d.ts`
        "declarationDir": "dist",
        // ðŸ“Œ Directory in cui verranno salvati i file compilati
        "outDir": "dist",
        // ðŸ“Œ Attiva il controllo rigoroso dei tipi
        "strict": true, // âœ… Abilita tutte le regole di TypeScript per un controllo piÃ¹ forte
        // ðŸ“Œ Specifica il metodo di risoluzione dei moduli
        "moduleResolution": "Bundler", // âœ… Ottimizzato per bundler come Rollup e Webpack, evita problemi con alias e moduli esterni
        // ðŸ“Œ Permette l'uso di `import` da moduli CommonJS
        "esModuleInterop": true, // âœ… Evita problemi di compatibilitÃ  con moduli che usano `module.exports` (CommonJS)
        // ðŸ“Œ Evita il controllo delle dichiarazioni nei file `.d.ts` delle dipendenze
        "skipLibCheck": true, // âœ… Velocizza la compilazione e previene errori inutili nei pacchetti npm
        // ðŸ“Œ Permette di importare moduli ES6 senza usare `import * as` o `default`
        "allowSyntheticDefaultImports": true,
        // ðŸ“Œ Permette di importare file JSON
        "resolveJsonModule": true,
        // ðŸ“Œ Forza la compilazione file per file, utile per ambienti che usano ESBuild e Rollup
        "isolatedModules": true,
        // ðŸ“Œ Controlla come TypeScript determina il tipo di file nel progetto
        "moduleDetection": "force", // âœ… Forza TypeScript a trattare qualsiasi file come un modulo
        // ðŸ“Œ Non genera output se ci sono errori di compilazione
        "noEmitOnError": false,
        // ðŸ“Œ Usa la sintassi `define` per le proprietÃ  delle classi (React 18+)
        "useDefineForClassFields": true,
        // ðŸ“Œ Permette la destrutturazione su iterabili in ES5/ES6
        "downlevelIteration": true, // âœ… Necessario per supportare `[...array]` su target piÃ¹ vecchi di ES6
        // ðŸ“Œ Disattiva il controllo aggressivo sugli accessi a proprietÃ  opzionali
        "noUncheckedIndexedAccess": false, // âœ… Previene errori quando si accede a proprietÃ  opzionali sugli oggetti
        // ðŸ“Œ Evita problemi con proprietÃ  opzionali strettamente tipizzate
        "exactOptionalPropertyTypes": false,
        // ðŸ“Œ Disattiva il controllo sui valori `null` e `undefined`
        "strictNullChecks": false,
        // ðŸ“Œ Evita il controllo sui file `.d.ts` delle librerie standard di TypeScript
        "skipDefaultLibCheck": true,
        // ðŸ“Œ Mantiene i symlink originali quando si risolvono moduli npm
        "preserveSymlinks": true, // âœ… Evita problemi con `node_modules` e librerie che dipendono da symlink
        // ðŸ“Œ Permette di importare file `.js` nei progetti TypeScript
        "allowJs": true, // âœ… Utile se il progetto contiene anche file JavaScript
        /* ðŸ“Œ Configura alias per importazioni piÃ¹ semplici */
        "paths": {
            "@/*": [
                "./src/*"
            ] // âœ… Permette di usare `@/component` invece di `../../component`
        }
    },
    // ðŸ“Œ Specifica quali file includere nella compilazione
    "include": [
        "src/**/*" // âœ… Include tutti i file TypeScript e JSX/TSX nella cartella `src`
    ],
    // ðŸ“Œ Specifica quali file escludere dalla compilazione
    "exclude": [
        "node_modules", // âœ… Esclude la cartella `node_modules` dalla compilazione
        "dist", // âœ… Evita di ricompilare i file giÃ  generati in `dist`
        "**/*.stories.tsx", // âœ… IGNORA TUTTI I FILE DI STORYBOOK
        "**/*.stories.ts", // âœ… Evita di compilare anche le varianti `.ts` di Storybook
        "**/*.test.tsx", // âœ… IGNORA TUTTI I FILE DI TEST (Jest)
        "**/*.test.ts" // âœ… Esclude anche le varianti `.ts` dei test
    ]
}