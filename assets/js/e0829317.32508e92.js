"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[598],{3023:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var i=s(3696);const r={},a=i.createContext(r);function d(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(a.Provider,{value:n},e.children)}},7306:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"pages/loading","title":"Loading Page","description":"The Loading Page layout provides a standardized way to display loading states in your application with a clean, user-friendly interface.","source":"@site/docs/pages/loading.md","sourceDirName":"pages","slug":"/pages/loading","permalink":"/pkg-fe-react-goblin-system/docs/pages/loading","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Error Page","permalink":"/pkg-fe-react-goblin-system/docs/pages/error"},"next":{"title":"Transformer Page","permalink":"/pkg-fe-react-goblin-system/docs/pages/transformer"}}');var r=s(2540),a=s(3023);const d={sidebar_position:3},t="Loading Page",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Loading Page",id:"basic-loading-page",level:3},{value:"Loading Page with Progress",id:"loading-page-with-progress",level:3},{value:"Loading Overlay",id:"loading-overlay",level:3},{value:"Custom Styled Loading",id:"custom-styled-loading",level:3},{value:"Design and Implementation",id:"design-and-implementation",level:2},{value:"Integration with Async Operations",id:"integration-with-async-operations",level:2},{value:"Accessibility Considerations",id:"accessibility-considerations",level:2},{value:"Customization",id:"customization",level:2},{value:"Styling",id:"styling",level:3},{value:"Custom Loading Components",id:"custom-loading-components",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"loading-page",children:"Loading Page"})}),"\n",(0,r.jsx)(n.p,{children:"The Loading Page layout provides a standardized way to display loading states in your application with a clean, user-friendly interface."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Loading Page offers:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Loading Indicators"})," - Visual feedback with customizable spinners"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progress Messages"})," - Informative text about the loading process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Responsive Design"})," - Adapts to different screen sizes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accessibility Features"})," - Screen reader support and keyboard focus management"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"The Loading Page is included in the main package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install pkg-fe-react-goblin-system\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.p,{children:"Import and use the Loading Page component:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { LoadingPage } from 'pkg-fe-react-goblin-system/pages/Loading';\n\nfunction MyComponent() {\n  const { isLoading, data } = useMyData();\n  \n  if (isLoading) {\n    return <LoadingPage message=\"Loading your data...\" />;\n  }\n  \n  return <div>{data}</div>;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Prop"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"message"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'Loading...'"})}),(0,r.jsx)(n.td,{children:"Message to display during loading"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"spinnerSize"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'sm' | 'md' | 'lg' | 'xl'"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'lg'"})}),(0,r.jsx)(n.td,{children:"Size of the loading spinner"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"spinnerColor"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'primary'"})}),(0,r.jsx)(n.td,{children:"Color of the spinner (any theme color)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fullPage"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Whether to take up the full page height"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"showProgress"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Whether to show a progress indicator"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"progress"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0"})}),(0,r.jsx)(n.td,{children:"Progress value (0-100) when showProgress is true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"backgroundColor"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Background color override"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"textColor"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),(0,r.jsx)(n.td,{children:"Text color override"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"withOverlay"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Whether to show with a semi-transparent overlay"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"className"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"''"})}),(0,r.jsx)(n.td,{children:"Additional CSS class names"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-loading-page",children:"Basic Loading Page"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<LoadingPage message="Loading your dashboard..." />\n'})}),"\n",(0,r.jsx)(n.h3,{id:"loading-page-with-progress",children:"Loading Page with Progress"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<LoadingPage \n  message="Uploading your file..." \n  showProgress={true} \n  progress={75} \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"loading-overlay",children:"Loading Overlay"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<div>\n  <YourContent />\n  {isLoading && (\n    <LoadingPage \n      message="Processing data..." \n      withOverlay={true} \n      spinnerSize="md"\n    />\n  )}\n</div>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-styled-loading",children:"Custom Styled Loading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<LoadingPage \n  message="Please wait while we prepare your report..." \n  spinnerColor="secondary"\n  backgroundColor="neutral.100"\n  textColor="text.secondary"\n  spinnerSize="xl"\n/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"design-and-implementation",children:"Design and Implementation"}),"\n",(0,r.jsx)(n.p,{children:"The Loading Page uses the following Goblin System components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Container"})," and ",(0,r.jsx)(n.code,{children:"Grid"})," for layout (replacing previous Flex components)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Spinner"})," for loading indicators (replacing previous ProgressBar components)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Text"})," for displaying loading messages"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The layout is responsive and will adapt to different screen sizes."}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-async-operations",children:"Integration with Async Operations"}),"\n",(0,r.jsx)(n.p,{children:"You can use the Loading Page with async operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useEffect } from 'react';\nimport { LoadingPage } from 'pkg-fe-react-goblin-system/pages/Loading';\n\nfunction DataFetchComponent() {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Start loading\n        setLoading(true);\n        \n        // Simulate progress updates\n        const progressInterval = setInterval(() => {\n          setProgress(prev => Math.min(prev + 10, 90));\n        }, 500);\n        \n        // Fetch data\n        const response = await fetch('https://api.example.com/data');\n        const result = await response.json();\n        \n        // Complete progress and set data\n        clearInterval(progressInterval);\n        setProgress(100);\n        setData(result);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  if (loading) {\n    return (\n      <LoadingPage \n        message=\"Fetching your data...\" \n        showProgress={true}\n        progress={progress}\n      />\n    );\n  }\n  \n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  \n  return (\n    <div>\n      <h1>Data Loaded Successfully</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"accessibility-considerations",children:"Accessibility Considerations"}),"\n",(0,r.jsx)(n.p,{children:"The Loading Page is built with accessibility in mind:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The spinner has an appropriate ",(0,r.jsx)(n.code,{children:"aria-label"})]}),"\n",(0,r.jsxs)(n.li,{children:["Loading state is announced to screen readers using ",(0,r.jsx)(n.code,{children:"aria-live"})]}),"\n",(0,r.jsx)(n.li,{children:"Focus is managed properly during loading states"}),"\n",(0,r.jsx)(n.li,{children:"Color contrast meets WCAG requirements"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,r.jsx)(n.h3,{id:"styling",children:"Styling"}),"\n",(0,r.jsx)(n.p,{children:"You can customize the styling of the Loading Page by applying custom CSS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<LoadingPage\n  className="custom-loading-page"\n  message="Custom styled loading page"\n/>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:".custom-loading-page {\n  background-color: #f0f8ff;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-loading-components",children:"Custom Loading Components"}),"\n",(0,r.jsx)(n.p,{children:"For more advanced customization, you can create your own loading component using Goblin System's base components:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\';\nimport { \n  Container, \n  Grid, \n  Col, \n  Text, \n  Spinner \n} from \'pkg-fe-react-goblin-system\';\n\nfunction CustomLoadingPage({ message, isLoading }) {\n  if (!isLoading) return null;\n  \n  return (\n    <Container>\n      <Grid alignItems="center" justifyContent="center" height="100vh">\n        <Col xs={12} textAlign="center">\n          <Spinner \n            size="lg" \n            color="primary" \n            aria-label="Loading content"\n          />\n          <Text variant="h3" mt={4}>\n            {message || \'Loading content...\'}\n          </Text>\n          <Text variant="body2" color="text.secondary" mt={2}>\n            This may take a few moments\n          </Text>\n        </Col>\n      </Grid>\n    </Container>\n  );\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);