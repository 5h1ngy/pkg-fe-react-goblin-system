"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[498],{3023:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(3696);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},6695:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"store/auth-store","title":"Authentication Store","description":"The Authentication Store is a Redux-based state management solution for handling authentication in your application.","source":"@site/docs/store/auth-store.md","sourceDirName":"store","slug":"/store/auth-store","permalink":"/pkg-fe-react-goblin-system/docs/store/auth-store","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Authentication Service","permalink":"/pkg-fe-react-goblin-system/docs/services/auth-service"},"next":{"title":"Theme System","permalink":"/pkg-fe-react-goblin-system/docs/theme/theme-system"}}');var s=t(2540),o=t(3023);const i={sidebar_position:1},a="Authentication Store",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Setting Up the Store",id:"setting-up-the-store",level:3},{value:"Using Auth Actions",id:"using-auth-actions",level:3},{value:"Accessing Auth State",id:"accessing-auth-state",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Auth Slice State",id:"auth-slice-state",level:3},{value:"Actions",id:"actions",level:3},{value:"<code>loginUser(credentials)</code>",id:"loginusercredentials",level:4},{value:"<code>registerUser(userData)</code>",id:"registeruseruserdata",level:4},{value:"<code>logoutUser()</code>",id:"logoutuser",level:4},{value:"<code>refreshAuthToken()</code>",id:"refreshauthtoken",level:4},{value:"Selectors",id:"selectors",level:3},{value:"<code>selectIsAuthenticated(state)</code>",id:"selectisauthenticatedstate",level:4},{value:"<code>selectCurrentUser(state)</code>",id:"selectcurrentuserstate",level:4},{value:"<code>selectAuthToken(state)</code>",id:"selectauthtokenstate",level:4},{value:"<code>selectAuthLoading(state)</code>",id:"selectauthloadingstate",level:4},{value:"<code>selectAuthError(state)</code>",id:"selectautherrorstate",level:4},{value:"Examples",id:"examples",level:2},{value:"Complete Login Form with Redux",id:"complete-login-form-with-redux",level:3},{value:"Protected Routes with Redux",id:"protected-routes-with-redux",level:3},{value:"Integration with Auth Service",id:"integration-with-auth-service",level:2},{value:"Related Components",id:"related-components",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"authentication-store",children:"Authentication Store"})}),"\n",(0,s.jsx)(n.p,{children:"The Authentication Store is a Redux-based state management solution for handling authentication in your application."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Auth Store provides:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication State"})," - Track user authentication status"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Information"})," - Store and access user data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Login/Logout Actions"})," - Redux actions for authentication operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Token Management"})," - Handle authentication tokens in sync with Redux state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selectors"})," - Easy access to authentication state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"The Auth Store is included in the main package:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install pkg-fe-react-goblin-system\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-the-store",children:"Setting Up the Store"}),"\n",(0,s.jsx)(n.p,{children:"First, add the auth reducer to your Redux store:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// src/store/index.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport { authReducer } from 'pkg-fe-react-goblin-system/store/auth';\n\nconst store = configureStore({\n  reducer: {\n    auth: authReducer,\n    // other reducers...\n  },\n});\n\nexport default store;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-auth-actions",children:"Using Auth Actions"}),"\n",(0,s.jsx)(n.p,{children:"Import and dispatch auth actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { useDispatch } from 'react-redux';\nimport { \n  loginUser,\n  logoutUser,\n  registerUser\n} from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction LoginButton() {\n  const dispatch = useDispatch();\n  \n  const handleLogin = async () => {\n    try {\n      await dispatch(loginUser({\n        email: 'user@example.com',\n        password: 'password123'\n      }));\n      // Handle successful login\n    } catch (error) {\n      // Handle login error\n    }\n  };\n  \n  return <button onClick={handleLogin}>Login</button>;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"accessing-auth-state",children:"Accessing Auth State"}),"\n",(0,s.jsx)(n.p,{children:"Access authentication state using selectors:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { useSelector } from 'react-redux';\nimport { \n  selectIsAuthenticated,\n  selectCurrentUser,\n  selectAuthLoading,\n  selectAuthError\n} from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction AuthStatus() {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const currentUser = useSelector(selectCurrentUser);\n  const loading = useSelector(selectAuthLoading);\n  const error = useSelector(selectAuthError);\n  \n  if (loading) {\n    return <div>Loading authentication status...</div>;\n  }\n  \n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  \n  return (\n    <div>\n      {isAuthenticated ? (\n        <div>\n          <h3>Welcome, {currentUser.name}!</h3>\n          <p>Email: {currentUser.email}</p>\n        </div>\n      ) : (\n        <div>Please log in to continue</div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"auth-slice-state",children:"Auth Slice State"}),"\n",(0,s.jsx)(n.p,{children:"The auth slice contains the following state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface AuthState {\n  isAuthenticated: boolean;\n  user: User | null;\n  token: string | null;\n  refreshToken: string | null;\n  loading: boolean;\n  error: Error | null;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,s.jsx)(n.h4,{id:"loginusercredentials",children:(0,s.jsx)(n.code,{children:"loginUser(credentials)"})}),"\n",(0,s.jsx)(n.p,{children:"Authenticates a user with the provided credentials:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useDispatch } from 'react-redux';\nimport { loginUser } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction LoginForm() {\n  const dispatch = useDispatch();\n  \n  const handleSubmit = async (formData) => {\n    try {\n      const resultAction = await dispatch(loginUser({\n        email: formData.email,\n        password: formData.password\n      }));\n      \n      // Check if login was successful\n      if (loginUser.fulfilled.match(resultAction)) {\n        console.log('Login successful!', resultAction.payload);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n  \n  // Form component\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"registeruseruserdata",children:(0,s.jsx)(n.code,{children:"registerUser(userData)"})}),"\n",(0,s.jsx)(n.p,{children:"Registers a new user with the provided data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useDispatch } from 'react-redux';\nimport { registerUser } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction RegisterForm() {\n  const dispatch = useDispatch();\n  \n  const handleSubmit = async (formData) => {\n    try {\n      const resultAction = await dispatch(registerUser({\n        email: formData.email,\n        password: formData.password,\n        name: formData.name,\n        // Other user data\n      }));\n      \n      if (registerUser.fulfilled.match(resultAction)) {\n        console.log('Registration successful!', resultAction.payload);\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n  \n  // Form component\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"logoutuser",children:(0,s.jsx)(n.code,{children:"logoutUser()"})}),"\n",(0,s.jsx)(n.p,{children:"Logs out the current user:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useDispatch } from 'react-redux';\nimport { logoutUser } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction LogoutButton() {\n  const dispatch = useDispatch();\n  \n  const handleLogout = () => {\n    dispatch(logoutUser());\n  };\n  \n  return <button onClick={handleLogout}>Logout</button>;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"refreshauthtoken",children:(0,s.jsx)(n.code,{children:"refreshAuthToken()"})}),"\n",(0,s.jsx)(n.p,{children:"Refreshes the authentication token:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useDispatch } from 'react-redux';\nimport { refreshAuthToken } from 'pkg-fe-react-goblin-system/store/auth';\n\n// Automatic token refresh\nuseEffect(() => {\n  const refreshInterval = setInterval(() => {\n    dispatch(refreshAuthToken());\n  }, 15 * 60 * 1000); // Refresh every 15 minutes\n  \n  return () => clearInterval(refreshInterval);\n}, [dispatch]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"selectors",children:"Selectors"}),"\n",(0,s.jsx)(n.h4,{id:"selectisauthenticatedstate",children:(0,s.jsx)(n.code,{children:"selectIsAuthenticated(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Returns whether the user is authenticated:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from 'react-redux';\nimport { selectIsAuthenticated } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction ProtectedComponent() {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  \n  if (!isAuthenticated) {\n    return <div>Please log in to view this content</div>;\n  }\n  \n  return <div>Protected content here</div>;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"selectcurrentuserstate",children:(0,s.jsx)(n.code,{children:"selectCurrentUser(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the current authenticated user:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from 'react-redux';\nimport { selectCurrentUser } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction UserProfile() {\n  const user = useSelector(selectCurrentUser);\n  \n  if (!user) {\n    return null;\n  }\n  \n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>Email: {user.email}</p>\n      {/* Other user properties */}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"selectauthtokenstate",children:(0,s.jsx)(n.code,{children:"selectAuthToken(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the current authentication token:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from 'react-redux';\nimport { selectAuthToken } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction useAuthHeader() {\n  const token = useSelector(selectAuthToken);\n  \n  return {\n    Authorization: token ? `Bearer ${token}` : '',\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"selectauthloadingstate",children:(0,s.jsx)(n.code,{children:"selectAuthLoading(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Returns whether an authentication operation is in progress:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from 'react-redux';\nimport { selectAuthLoading } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction AuthButton() {\n  const isLoading = useSelector(selectAuthLoading);\n  \n  return (\n    <button disabled={isLoading}>\n      {isLoading ? 'Processing...' : 'Login'}\n    </button>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"selectautherrorstate",children:(0,s.jsx)(n.code,{children:"selectAuthError(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Returns any authentication error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from 'react-redux';\nimport { selectAuthError } from 'pkg-fe-react-goblin-system/store/auth';\n\nfunction AuthErrorDisplay() {\n  const error = useSelector(selectAuthError);\n  \n  if (!error) {\n    return null;\n  }\n  \n  return (\n    <div className=\"error-message\">\n      {error.message}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"complete-login-form-with-redux",children:"Complete Login Form with Redux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { \n  loginUser, \n  selectAuthLoading, \n  selectAuthError \n} from 'pkg-fe-react-goblin-system/store/auth';\nimport { \n  Container, \n  Input, \n  Button, \n  Text \n} from 'pkg-fe-react-goblin-system';\n\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectAuthLoading);\n  const error = useSelector(selectAuthError);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await dispatch(loginUser({ email, password }));\n      // Redirect or show success message\n    } catch (err) {\n      // Error is handled by the Redux slice\n    }\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <Text variant=\"h2\">Login</Text>\n        \n        {error && <Text color=\"error\">{error.message}</Text>}\n        \n        <Input\n          label=\"Email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        \n        <Input\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        \n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Logging in...' : 'Login'}\n        </Button>\n      </form>\n    </Container>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"protected-routes-with-redux",children:"Protected Routes with Redux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\';\nimport { Navigate, Outlet } from \'react-router-dom\';\nimport { useSelector } from \'react-redux\';\nimport { \n  selectIsAuthenticated, \n  selectAuthLoading \n} from \'pkg-fe-react-goblin-system/store/auth\';\nimport { Spinner } from \'pkg-fe-react-goblin-system\';\n\nfunction ProtectedRoutes() {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const isLoading = useSelector(selectAuthLoading);\n  \n  if (isLoading) {\n    return (\n      <Container>\n        <Spinner size="lg" />\n        <Text>Checking authentication...</Text>\n      </Container>\n    );\n  }\n  \n  return isAuthenticated ? <Outlet /> : <Navigate to="/login" />;\n}\n\n// Usage with React Router\nfunction AppRoutes() {\n  return (\n    <Routes>\n      <Route path="/login" element={<LoginPage />} />\n      <Route element={<ProtectedRoutes />}>\n        <Route path="/dashboard" element={<Dashboard />} />\n        <Route path="/profile" element={<UserProfile />} />\n        <Route path="/settings" element={<Settings />} />\n      </Route>\n    </Routes>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-auth-service",children:"Integration with Auth Service"}),"\n",(0,s.jsx)(n.p,{children:"The Auth Store integrates with the Auth Service to handle API calls and token management:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Simplified example of how the auth slice works internally\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { login, register, logout } from 'pkg-fe-react-goblin-system/services/auth';\n\nexport const loginUser = createAsyncThunk(\n  'auth/login',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      const user = await login(credentials.email, credentials.password);\n      return user;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  }\n);\n\n// Similar implementations for registerUser and logoutUser\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    refreshToken: null,\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    // Synchronous reducers\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginUser.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.isAuthenticated = true;\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.loading = false;\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n      \n    // Similar cases for registerUser and logoutUser\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/pkg-fe-react-goblin-system/docs/providers/auth-provider",children:"Auth Provider"})," - React context provider for authentication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/pkg-fe-react-goblin-system/docs/services/auth-service",children:"Auth Service"})," - Authentication service APIs"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);