"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[354],{3023:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>r});var t=i(3696);const s={},o=t.createContext(s);function l(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),t.createElement(o.Provider,{value:e},n.children)}},9081:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/icon-button","title":"IconButton","description":"The IconButton component provides a button with an icon and optional text, replacing Chakra UI\'s Icon component with a more interactive and accessible solution.","source":"@site/docs/components/icon-button.md","sourceDirName":"components","slug":"/components/icon-button","permalink":"/pkg-fe-react-goblin-system/docs/components/icon-button","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2}}');var s=i(2540),o=i(3023);const l={sidebar_position:2},r="IconButton",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic IconButton",id:"basic-iconbutton",level:3},{value:"Different Sizes",id:"different-sizes",level:3},{value:"Color Variations",id:"color-variations",level:3},{value:"Button Variants",id:"button-variants",level:3},{value:"Round Buttons",id:"round-buttons",level:3},{value:"With Text",id:"with-text",level:3},{value:"Loading State",id:"loading-state",level:3},{value:"Active State",id:"active-state",level:3},{value:"Migration from Chakra UI Icon",id:"migration-from-chakra-ui-icon",level:2},{value:"Simple Icon Conversion",id:"simple-icon-conversion",level:3},{value:"Icon with Click Handler",id:"icon-with-click-handler",level:3},{value:"Icon with Text",id:"icon-with-text",level:3},{value:"Design and Implementation",id:"design-and-implementation",level:2},{value:"Accessibility Considerations",id:"accessibility-considerations",level:2},{value:"Customization",id:"customization",level:2},{value:"Using with Styled Components",id:"using-with-styled-components",level:3},{value:"Custom Icon Integration",id:"custom-icon-integration",level:3},{value:"Related Components",id:"related-components",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Related Components",id:"related-components-1",level:2}];function a(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"iconbutton",children:"IconButton"})}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component provides a button with an icon and optional text, replacing Chakra UI's Icon component with a more interactive and accessible solution."}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component offers:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Interactive Icons"})," - Create clickable icon elements with proper accessibility"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Size Variations"})," - Multiple size options for different UI contexts"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Color Options"})," - Theme-based color variations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Accessibility"})," - Built-in accessibility features like proper focus states and aria labels"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Text Support"})," - Optional text to accompany the icon"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component is included in the main package:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install pkg-fe-react-goblin-system\n"})}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:"import { IconButton } from 'pkg-fe-react-goblin-system';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <IconButton \n        icon=\"edit\" \n        aria-label=\"Edit item\" \n        onClick={() => console.log('Edit clicked')} \n      />\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(e.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Prop"}),(0,s.jsx)(e.th,{children:"Type"}),(0,s.jsx)(e.th,{children:"Default"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"icon"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Required"})}),(0,s.jsx)(e.td,{children:"Icon name to display"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"aria-label"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.strong,{children:"Required"})}),(0,s.jsx)(e.td,{children:"Accessible label for the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"size"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'xs' | 'sm' | 'md' | 'lg' | 'xl'"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'md'"})}),(0,s.jsx)(e.td,{children:"Size of the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"color"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'primary'"})}),(0,s.jsx)(e.td,{children:"Color of the button (any theme color)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"variant"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'solid' | 'outline' | 'ghost'"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"'solid'"})}),(0,s.jsx)(e.td,{children:"Visual style of the button"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"disabled"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"Whether the button is disabled"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"isRound"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"Whether to use a round shape"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"isActive"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"Whether the button is in an active state"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"isLoading"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"boolean"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"false"})}),(0,s.jsx)(e.td,{children:"Whether to show a loading spinner"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"onClick"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"(event) => void"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"undefined"})}),(0,s.jsx)(e.td,{children:"Click handler function"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"children"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"React.ReactNode"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"undefined"})}),(0,s.jsx)(e.td,{children:"Optional text or other elements to display next to the icon"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"className"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"string"})}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"''"})}),(0,s.jsx)(e.td,{children:"Additional CSS class names"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(e.h3,{id:"basic-iconbutton",children:"Basic IconButton"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="search"\n  aria-label="Search"\n  onClick={() => console.log(\'Search clicked\')}\n/>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"different-sizes",children:"Different Sizes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<div>\n  <IconButton icon="star" aria-label="Favorite (extra small)" size="xs" />\n  <IconButton icon="star" aria-label="Favorite (small)" size="sm" />\n  <IconButton icon="star" aria-label="Favorite (medium)" size="md" />\n  <IconButton icon="star" aria-label="Favorite (large)" size="lg" />\n  <IconButton icon="star" aria-label="Favorite (extra large)" size="xl" />\n</div>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"color-variations",children:"Color Variations"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<div>\n  <IconButton icon="check" aria-label="Approve" color="success" />\n  <IconButton icon="warning" aria-label="Warning" color="warning" />\n  <IconButton icon="close" aria-label="Error" color="error" />\n  <IconButton icon="info" aria-label="Information" color="info" />\n</div>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"button-variants",children:"Button Variants"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<div>\n  <IconButton icon="edit" aria-label="Edit (solid)" variant="solid" />\n  <IconButton icon="edit" aria-label="Edit (outline)" variant="outline" />\n  <IconButton icon="edit" aria-label="Edit (ghost)" variant="ghost" />\n</div>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"round-buttons",children:"Round Buttons"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<div>\n  <IconButton \n    icon="plus" \n    aria-label="Add item" \n    isRound \n    size="lg" \n    color="primary" \n  />\n</div>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"with-text",children:"With Text"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="download" \n  aria-label="Download file"\n>\n  Download\n</IconButton>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loading-state",children:"Loading State"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="save" \n  aria-label="Save changes" \n  isLoading \n  onClick={() => saveData()}\n>\n  Saving...\n</IconButton>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"active-state",children:"Active State"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="heart" \n  aria-label="Like" \n  isActive={isLiked}\n  color={isLiked ? "error" : "neutral"}\n  onClick={() => setIsLiked(!isLiked)}\n/>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"migration-from-chakra-ui-icon",children:"Migration from Chakra UI Icon"}),"\n",(0,s.jsx)(e.p,{children:"If you're migrating from Chakra UI's Icon component, here's how to convert them to Goblin System's IconButton:"}),"\n",(0,s.jsx)(e.h3,{id:"simple-icon-conversion",children:"Simple Icon Conversion"}),"\n",(0,s.jsx)(e.p,{children:"Before (Chakra UI):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<Icon name="edit" color="blue.500" boxSize={6} />\n'})}),"\n",(0,s.jsx)(e.p,{children:"After (Goblin System):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="edit" \n  aria-label="Edit" \n  color="primary" \n  size="md" \n  variant="ghost" \n/>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"icon-with-click-handler",children:"Icon with Click Handler"}),"\n",(0,s.jsx)(e.p,{children:"Before (Chakra UI):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<Box onClick={handleClick} cursor="pointer">\n  <Icon name="delete" color="red.500" />\n</Box>\n'})}),"\n",(0,s.jsx)(e.p,{children:"After (Goblin System):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="delete" \n  aria-label="Delete item" \n  color="error" \n  onClick={handleClick} \n/>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"icon-with-text",children:"Icon with Text"}),"\n",(0,s.jsx)(e.p,{children:"Before (Chakra UI):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<Flex align="center">\n  <Icon name="check" color="green.500" mr={2} />\n  <Text>Completed</Text>\n</Flex>\n'})}),"\n",(0,s.jsx)(e.p,{children:"After (Goblin System):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'<IconButton \n  icon="check" \n  aria-label="Completed" \n  color="success" \n  variant="ghost"\n>\n  Completed\n</IconButton>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"design-and-implementation",children:"Design and Implementation"}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component is built with:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Styled Components"})," - For consistent styling with the theme system"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Accessibility Focus"})," - Proper keyboard navigation and screen reader support"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Theme Integration"})," - Using theme tokens for colors, spacing, and sizes"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Under the hood, the IconButton uses:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:"// Simplified implementation\nconst IconButton = ({ \n  icon, \n  size = 'md', \n  color = 'primary', \n  variant = 'solid',\n  isRound = false,\n  disabled = false,\n  'aria-label': ariaLabel,\n  children,\n  onClick,\n  ...props \n}) => {\n  return (\n    <StyledButton\n      onClick={onClick}\n      disabled={disabled}\n      $size={size}\n      $color={color}\n      $variant={variant}\n      $isRound={isRound}\n      aria-label={ariaLabel}\n      {...props}\n    >\n      <Icon name={icon} size={size} />\n      {children && <span className=\"icon-button-text\">{children}</span>}\n    </StyledButton>\n  );\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"accessibility-considerations",children:"Accessibility Considerations"}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component follows these accessibility best practices:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Requires an ",(0,s.jsx)(e.code,{children:"aria-label"})," prop for screen reader users"]}),"\n",(0,s.jsx)(e.li,{children:"Maintains proper focus states for keyboard navigation"}),"\n",(0,s.jsx)(e.li,{children:"Includes disabled states with proper ARIA attributes"}),"\n",(0,s.jsx)(e.li,{children:"Ensures adequate color contrast for all theme variants"}),"\n",(0,s.jsx)(e.li,{children:"Provides loading states with appropriate announcements"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(e.h3,{id:"using-with-styled-components",children:"Using with Styled Components"}),"\n",(0,s.jsx)(e.p,{children:"You can extend the IconButton with styled-components:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:'import styled from \'styled-components\';\nimport { IconButton } from \'pkg-fe-react-goblin-system\';\n\nconst FloatingActionButton = styled(IconButton)`\n  position: fixed;\n  bottom: ${props => props.theme.spacing.lg};\n  right: ${props => props.theme.spacing.lg};\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n  }\n  \n  transition: transform 0.2s, box-shadow 0.2s;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <h1>My Application</h1>\n      <FloatingActionButton \n        icon="plus" \n        aria-label="Add new item" \n        color="primary" \n        size="lg"\n        isRound\n      />\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"custom-icon-integration",children:"Custom Icon Integration"}),"\n",(0,s.jsx)(e.p,{children:"If you need to use custom icons:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",children:"import { IconButton } from 'pkg-fe-react-goblin-system';\nimport { ReactComponent as CustomIcon } from './custom-icon.svg';\n\n// Register the custom icon with the icon system\nregisterIcon('custom-action', CustomIcon);\n\nfunction MyComponent() {\n  return (\n    <IconButton \n      icon=\"custom-action\" \n      aria-label=\"Perform custom action\" \n    />\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"related-components",children:"Related Components"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Button"})," - Use when you need a standard button without an icon"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Alert"})," - For notifications and messages that require user attention"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Spinner"})," - For loading states within buttons"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(e.p,{children:"The IconButton component is built with:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Styled Components"})," - For consistent styling with the theme system"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Accessibility Focus"})," - Proper keyboard navigation and screen reader support"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Theme Integration"})," - Using theme tokens for colors, spacing, and sizes"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"related-components-1",children:"Related Components"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Button"})," - Use when you need a standard button without an icon"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Alert"})," - For notifications and messages that require user attention"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Spinner"})," - For loading states within buttons"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(a,{...n})}):a(n)}}}]);