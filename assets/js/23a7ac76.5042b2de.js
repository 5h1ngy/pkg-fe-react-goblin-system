"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[309],{3023:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(3696);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},5929:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"theme/theme-system","title":"Theme System","description":"The Goblin System includes a powerful and flexible theming system that allows you to customize the appearance of your application.","source":"@site/docs/theme/theme-system.md","sourceDirName":"theme","slug":"/theme/theme-system","permalink":"/pkg-fe-react-goblin-system/docs/theme/theme-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Authentication Store","permalink":"/pkg-fe-react-goblin-system/docs/store/auth-store"},"next":{"title":"Theme Customization","permalink":"/pkg-fe-react-goblin-system/docs/theming/"}}');var t=s(2540),i=s(3023);const o={sidebar_position:1},l="Theme System",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Theme Structure",id:"theme-structure",level:2},{value:"Using the Theme",id:"using-the-theme",level:2},{value:"With GoblinProvider",id:"with-goblinprovider",level:3},{value:"Accessing Theme Values in Components",id:"accessing-theme-values-in-components",level:3},{value:"Theme Tokens",id:"theme-tokens",level:2},{value:"Colors",id:"colors",level:3},{value:"Typography",id:"typography",level:3},{value:"Spacing",id:"spacing",level:3},{value:"Border Radius",id:"border-radius",level:3},{value:"Breakpoints",id:"breakpoints",level:3},{value:"Customizing the Theme",id:"customizing-the-theme",level:2},{value:"Creating a Custom Theme",id:"creating-a-custom-theme",level:3},{value:"Theme Toggle",id:"theme-toggle",level:3},{value:"Global Styles",id:"global-styles",level:2},{value:"Understanding Global Styles",id:"understanding-global-styles",level:3},{value:"Custom Global Styles",id:"custom-global-styles",level:3},{value:"Theme Utilities",id:"theme-utilities",level:2},{value:"Using Media Queries",id:"using-media-queries",level:3},{value:"Color Utilities",id:"color-utilities",level:3},{value:"Related Components",id:"related-components",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"theme-system",children:"Theme System"})}),"\n",(0,t.jsx)(n.p,{children:"The Goblin System includes a powerful and flexible theming system that allows you to customize the appearance of your application."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The theme system provides:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Light and Dark Modes"})," - Built-in light and dark themes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Color Palettes"})," - Comprehensive set of color tokens"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Typography"})," - Type scale, font families, and text styles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spacing"})," - Consistent spacing scale"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Breakpoints"})," - Responsive design breakpoints"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Animation"})," - Transition and animation settings"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"theme-structure",children:"Theme Structure"}),"\n",(0,t.jsx)(n.p,{children:"The Goblin System theme is built with TypeScript and follows this structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Theme {\n  mode: 'light' | 'dark';\n  colors: ColorPalette;\n  typography: Typography;\n  spacing: Spacing;\n  radii: Radii;\n  breakpoints: Breakpoints;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-theme",children:"Using the Theme"}),"\n",(0,t.jsx)(n.h3,{id:"with-goblinprovider",children:"With GoblinProvider"}),"\n",(0,t.jsxs)(n.p,{children:["The simplest way to use the theme is with the ",(0,t.jsx)(n.code,{children:"GoblinProvider"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { GoblinProvider } from 'pkg-fe-react-goblin-system';\n\nfunction App() {\n  return (\n    <GoblinProvider>\n      {/* Your application code */}\n    </GoblinProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"accessing-theme-values-in-components",children:"Accessing Theme Values in Components"}),"\n",(0,t.jsx)(n.p,{children:"You can access theme values in your styled components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  background-color: ${props => props.theme.colors.primary.main};\n  color: ${props => props.theme.colors.primary.contrastText};\n  padding: ${props => props.theme.spacing.md};\n  border-radius: ${props => props.theme.radii.md};\n  font-family: ${props => props.theme.typography.fontFamily};\n  font-size: ${props => props.theme.typography.fontSize.md};\n  \n  &:hover {\n    background-color: ${props => props.theme.colors.primary.dark};\n  }\n`;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"theme-tokens",children:"Theme Tokens"}),"\n",(0,t.jsx)(n.h3,{id:"colors",children:"Colors"}),"\n",(0,t.jsx)(n.p,{children:"The theme includes a comprehensive color system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ColorPalette {\n  primary: ColorShades;\n  secondary: ColorShades;\n  tertiary: ColorShades;\n  success: ColorShades;\n  warning: ColorShades;\n  error: ColorShades;\n  info: ColorShades;\n  neutral: NeutralColors;\n  background: {\n    default: string;\n    paper: string;\n    alt: string;\n  };\n  text: {\n    primary: string;\n    secondary: string;\n    disabled: string;\n    hint: string;\n  };\n}\n\ninterface ColorShades {\n  lightest: string;\n  lighter: string;\n  light: string;\n  main: string;\n  dark: string;\n  darker: string;\n  darkest: string;\n  contrastText: string;\n}\n\ninterface NeutralColors {\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"typography",children:"Typography"}),"\n",(0,t.jsx)(n.p,{children:"The typography system provides consistent text styles:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Typography {\n  fontFamily: string;\n  fontFamilyMono: string;\n  fontSize: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n    xxl: string;\n  };\n  fontWeight: {\n    light: number;\n    regular: number;\n    medium: number;\n    semibold: number;\n    bold: number;\n  };\n  lineHeight: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n  letterSpacing: {\n    tight: string;\n    normal: string;\n    wide: string;\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spacing",children:"Spacing"}),"\n",(0,t.jsx)(n.p,{children:"The spacing system provides consistent spacing values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Spacing {\n  xs: string;\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n  xxl: string;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"border-radius",children:"Border Radius"}),"\n",(0,t.jsx)(n.p,{children:"The radius system for consistent corner rounding:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Radii {\n  none: string;\n  xs: string;\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n  pill: string;\n  circle: string;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"breakpoints",children:"Breakpoints"}),"\n",(0,t.jsx)(n.p,{children:"Breakpoints for responsive design:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Breakpoints {\n  xs: string;  // Extra small devices\n  sm: string;  // Small devices\n  md: string;  // Medium devices\n  lg: string;  // Large devices\n  xl: string;  // Extra large devices\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-the-theme",children:"Customizing the Theme"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-custom-theme",children:"Creating a Custom Theme"}),"\n",(0,t.jsx)(n.p,{children:"You can create a custom theme by extending the default themes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { GoblinProvider } from 'pkg-fe-react-goblin-system';\nimport { lightTheme } from 'pkg-fe-react-goblin-system/theme/theme';\n\n// Customize the theme\nconst customTheme = {\n  ...lightTheme,\n  colors: {\n    ...lightTheme.colors,\n    primary: {\n      ...lightTheme.colors.primary,\n      main: '#1e88e5', // Custom primary color\n      dark: '#0d47a1',\n      light: '#64b5f6',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      ...lightTheme.colors.secondary,\n      main: '#ff4081', // Custom secondary color\n    },\n  },\n  typography: {\n    ...lightTheme.typography,\n    fontFamily: \"'Poppins', 'SF Pro Display', sans-serif\",\n  },\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      <GoblinProvider disableGlobalStyles={false}>\n        {/* Your application code */}\n      </GoblinProvider>\n    </ThemeProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"theme-toggle",children:"Theme Toggle"}),"\n",(0,t.jsxs)(n.p,{children:["You can implement a theme toggle using the ",(0,t.jsx)(n.code,{children:"useTheme"})," hook:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { useTheme, ThemeProvider } from 'styled-components';\nimport { GoblinProvider, Button } from 'pkg-fe-react-goblin-system';\nimport { lightTheme, darkTheme } from 'pkg-fe-react-goblin-system/theme/theme';\n\nfunction ThemeToggle() {\n  const theme = useTheme();\n  const [isDarkMode, setIsDarkMode] = React.useState(theme.mode === 'dark');\n  \n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  \n  return (\n    <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n      <GoblinProvider>\n        <Button onClick={toggleTheme}>\n          Toggle to {isDarkMode ? 'Light' : 'Dark'} Mode\n        </Button>\n        {/* Rest of your application */}\n      </GoblinProvider>\n    </ThemeProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"global-styles",children:"Global Styles"}),"\n",(0,t.jsxs)(n.p,{children:["The Goblin System provides global styles through the ",(0,t.jsx)(n.code,{children:"GlobalStyles"})," component, which is automatically included when using the ",(0,t.jsx)(n.code,{children:"GoblinProvider"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"understanding-global-styles",children:"Understanding Global Styles"}),"\n",(0,t.jsx)(n.p,{children:"The Global Styles apply base styling to HTML elements for consistent appearance:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reset browser default styles"}),"\n",(0,t.jsx)(n.li,{children:"Apply base typography settings"}),"\n",(0,t.jsx)(n.li,{children:"Set up consistent form elements"}),"\n",(0,t.jsx)(n.li,{children:"Configure focus states for accessibility"}),"\n",(0,t.jsx)(n.li,{children:"Provide smooth scrolling behavior"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"custom-global-styles",children:"Custom Global Styles"}),"\n",(0,t.jsx)(n.p,{children:"If you need to extend the global styles:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { GoblinProvider, GlobalStyles } from 'pkg-fe-react-goblin-system';\n\n// Create custom global styles\nconst CustomGlobalStyles = createGlobalStyle`\n  // Your custom global styles here\n  ::selection {\n    background-color: ${props => props.theme.colors.primary.main};\n    color: ${props => props.theme.colors.primary.contrastText};\n  }\n  \n  // Additional custom styles\n`;\n\nfunction App() {\n  return (\n    <GoblinProvider>\n      <CustomGlobalStyles />\n      {/* Your application code */}\n    </GoblinProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"theme-utilities",children:"Theme Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"using-media-queries",children:"Using Media Queries"}),"\n",(0,t.jsx)(n.p,{children:"The theme provides breakpoint utilities for responsive design:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import styled from 'styled-components';\n\nconst ResponsiveContainer = styled.div`\n  width: 100%;\n  \n  @media (min-width: ${props => props.theme.breakpoints.sm}) {\n    width: 540px;\n  }\n  \n  @media (min-width: ${props => props.theme.breakpoints.md}) {\n    width: 720px;\n  }\n  \n  @media (min-width: ${props => props.theme.breakpoints.lg}) {\n    width: 960px;\n  }\n  \n  @media (min-width: ${props => props.theme.breakpoints.xl}) {\n    width: 1140px;\n  }\n`;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"color-utilities",children:"Color Utilities"}),"\n",(0,t.jsx)(n.p,{children:"You can use theme colors in various ways:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import styled from 'styled-components';\n\nconst StatusIndicator = styled.div`\n  background-color: ${props => {\n    switch (props.status) {\n      case 'success':\n        return props.theme.colors.success.main;\n      case 'warning':\n        return props.theme.colors.warning.main;\n      case 'error':\n        return props.theme.colors.error.main;\n      default:\n        return props.theme.colors.neutral[300];\n    }\n  }};\n  color: ${props => {\n    switch (props.status) {\n      case 'success':\n        return props.theme.colors.success.contrastText;\n      case 'warning':\n        return props.theme.colors.warning.contrastText;\n      case 'error':\n        return props.theme.colors.error.contrastText;\n      default:\n        return props.theme.colors.text.primary;\n    }\n  }};\n`;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/pkg-fe-react-goblin-system/docs/providers/goblin-provider",children:"GoblinProvider"})," - Main provider for theming"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ThemeProvider"})," - Underlying theme provider component"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GlobalStyles"})," - Global style definitions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);