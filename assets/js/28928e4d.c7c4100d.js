"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[853],{3023:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(3696);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},4125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"providers/auth-provider","title":"Auth Provider","description":"The Auth Provider in Goblin System provides a complete authentication solution for your React applications. It handles user authentication flows, token management, and protected routes.","source":"@site/docs/providers/auth-provider.md","sourceDirName":"providers","slug":"/providers/auth-provider","permalink":"/pkg-fe-react-goblin-system/docs/providers/auth-provider","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"GoblinProvider","permalink":"/pkg-fe-react-goblin-system/docs/providers/goblin-provider"},"next":{"title":"HTTP Request Handlers","permalink":"/pkg-fe-react-goblin-system/docs/services/http-handlers"}}');var o=t(2540),i=t(3023);const s={sidebar_position:2},d="Auth Provider",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"AuthProvider Properties",id:"authprovider-properties",level:3},{value:"useAuth Hook",id:"useauth-hook",level:3},{value:"Examples",id:"examples",level:2},{value:"Login Form",id:"login-form",level:3},{value:"Protected Route",id:"protected-route",level:3},{value:"Integration with Redux",id:"integration-with-redux",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Token Storage",id:"custom-token-storage",level:3},{value:"Custom Auth Endpoints",id:"custom-auth-endpoints",level:3},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"auth-provider",children:"Auth Provider"})}),"\n",(0,o.jsx)(n.p,{children:"The Auth Provider in Goblin System provides a complete authentication solution for your React applications. It handles user authentication flows, token management, and protected routes."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"The Auth Provider offers these key features:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Authentication"})," - Login, registration, and logout functionality"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Token Management"})," - Handling of JWT tokens, including storage and refresh"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Protected Routes"})," - Route protection based on authentication status"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Auth State"})," - Global authentication state management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Integration with Redux"})," - Built-in Redux store for auth state"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.p,{children:"The Auth Provider is included in the main package:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install pkg-fe-react-goblin-system\n"})}),"\n",(0,o.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.p,{children:"Wrap your application with the Auth Provider:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { AuthProvider } from 'pkg-fe-react-goblin-system/providers/Auth';\nimport { GoblinProvider } from 'pkg-fe-react-goblin-system';\n\nfunction App() {\n  return (\n    <GoblinProvider>\n      <AuthProvider\n        authEndpoint=\"https://api.example.com/auth\"\n        onLoginSuccess={(user) => console.log('User logged in:', user)}\n        onLogout={() => console.log('User logged out')}\n      >\n        {/* Your application code */}\n      </AuthProvider>\n    </GoblinProvider>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,o.jsx)(n.h3,{id:"authprovider-properties",children:"AuthProvider Properties"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Prop"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"children"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ReactNode"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"Child components"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"authEndpoint"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"string"})}),(0,o.jsx)(n.td,{children:"Required"}),(0,o.jsx)(n.td,{children:"Base URL for authentication API"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"tokenStorage"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"'localStorage' | 'sessionStorage' | 'memory'"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"'localStorage'"})}),(0,o.jsx)(n.td,{children:"Where to store authentication tokens"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onLoginSuccess"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(user: User) => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Callback function called after successful login"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onLoginFailure"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"(error: Error) => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Callback function called after login failure"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onLogout"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"() => void"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"undefined"})}),(0,o.jsx)(n.td,{children:"Callback function called after logout"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"autoRefresh"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boolean"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"true"})}),(0,o.jsx)(n.td,{children:"Whether to automatically refresh tokens"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"refreshInterval"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"number"})}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"300000"})," (5 min)"]}),(0,o.jsx)(n.td,{children:"Time in milliseconds between token refresh attempts"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"useauth-hook",children:"useAuth Hook"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"useAuth"})," hook provides access to authentication functionality and state:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { useAuth } from 'pkg-fe-react-goblin-system/providers/Auth';\n\nfunction MyComponent() {\n  const { \n    user,           // Current user object, null if not logged in\n    isAuthenticated, // Boolean indicating if user is authenticated\n    login,          // Function to log in\n    logout,         // Function to log out\n    register,       // Function to register a new user\n    isLoading,      // Boolean indicating if an auth operation is in progress\n    error           // Any authentication error\n  } = useAuth();\n  \n  // Use these values and functions in your component\n  return (\n    <div>\n      {isAuthenticated ? (\n        <button onClick={logout}>Log out</button>\n      ) : (\n        <button onClick={() => login('user@example.com', 'password')}>\n          Log in\n        </button>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"login-form",children:"Login Form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { useAuth } from 'pkg-fe-react-goblin-system/providers/Auth';\nimport { \n  Container, \n  Input, \n  Button, \n  Text \n} from 'pkg-fe-react-goblin-system';\n\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login, isLoading, error } = useAuth();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await login(email, password);\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <Text variant=\"h2\">Login</Text>\n        \n        {error && <Text color=\"error\">{error.message}</Text>}\n        \n        <Input\n          label=\"Email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        \n        <Input\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        \n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Logging in...' : 'Login'}\n        </Button>\n      </form>\n    </Container>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"protected-route",children:"Protected Route"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from 'pkg-fe-react-goblin-system/providers/Auth';\n\nfunction ProtectedRoute({ children }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  \n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  return children;\n}\n\n// Usage with React Router\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/login\" element={<LoginPage />} />\n      <Route \n        path=\"/dashboard\" \n        element={\n          <ProtectedRoute>\n            <Dashboard />\n          </ProtectedRoute>\n        } \n      />\n    </Routes>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-redux",children:"Integration with Redux"}),"\n",(0,o.jsx)(n.p,{children:"The Auth Provider automatically integrates with Redux. If you're using Redux in your application, you can access the auth state from your Redux store:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { useSelector } from 'react-redux';\n\nfunction MyComponent() {\n  const authState = useSelector((state) => state.auth);\n  \n  return (\n    <div>\n      {authState.isAuthenticated ? (\n        <p>Welcome, {authState.user.name}!</p>\n      ) : (\n        <p>Please log in</p>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"custom-token-storage",children:"Custom Token Storage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { AuthProvider } from 'pkg-fe-react-goblin-system/providers/Auth';\n\nfunction App() {\n  return (\n    <AuthProvider\n      authEndpoint=\"https://api.example.com/auth\"\n      tokenStorage=\"sessionStorage\" // Use session storage instead of local storage\n    >\n      {/* Your application code */}\n    </AuthProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"custom-auth-endpoints",children:"Custom Auth Endpoints"}),"\n",(0,o.jsx)(n.p,{children:"If your API has different endpoints than the defaults, you can customize them:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { AuthProvider } from 'pkg-fe-react-goblin-system/providers/Auth';\n\nfunction App() {\n  return (\n    <AuthProvider\n      authEndpoint=\"https://api.example.com\"\n      endpoints={{\n        login: '/custom/login',          // Default: '/auth/login'\n        register: '/custom/register',    // Default: '/auth/register'\n        logout: '/custom/logout',        // Default: '/auth/logout'\n        refresh: '/custom/refresh-token' // Default: '/auth/refresh'\n      }}\n    >\n      {/* Your application code */}\n    </AuthProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Form Components"})," - Pre-built login and registration form components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/pkg-fe-react-goblin-system/docs/store/auth-store",children:"Auth Store"})," - Redux store for authentication"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);