"use strict";(self.webpackChunkreact_goblin_system_docs=self.webpackChunkreact_goblin_system_docs||[]).push([[725],{3023:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var s=t(3696);const r={},i=s.createContext(r);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(i.Provider,{value:e},n.children)}},9485:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"pages/transformer","title":"Transformer Page","description":"The Transformer Page layout provides a standardized way to display data transformation interfaces with options for input, processing controls, and output visualization.","source":"@site/docs/pages/transformer.md","sourceDirName":"pages","slug":"/pages/transformer","permalink":"/pkg-fe-react-goblin-system/docs/pages/transformer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Loading Page","permalink":"/pkg-fe-react-goblin-system/docs/pages/loading"},"next":{"title":"GoblinProvider","permalink":"/pkg-fe-react-goblin-system/docs/providers/goblin-provider"}}');var r=t(2540),i=t(3023);const o={sidebar_position:4},a="Transformer Page",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Transformer",id:"basic-transformer",level:3},{value:"Vertical Layout with Custom Heights",id:"vertical-layout-with-custom-heights",level:3},{value:"Transformer with Custom Controls",id:"transformer-with-custom-controls",level:3},{value:"Design and Implementation",id:"design-and-implementation",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"With File Uploads",id:"with-file-uploads",level:3},{value:"Accessibility Considerations",id:"accessibility-considerations",level:2},{value:"Customization",id:"customization",level:2},{value:"Styling",id:"styling",level:3},{value:"Building a Custom Transformer",id:"building-a-custom-transformer",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"transformer-page",children:"Transformer Page"})}),"\n",(0,r.jsx)(e.p,{children:"The Transformer Page layout provides a standardized way to display data transformation interfaces with options for input, processing controls, and output visualization."}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(e.p,{children:"The Transformer Page offers:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Data Input/Output"})," - Clear visualization of data before and after transformation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Processing Controls"})," - UI elements for configuring transformations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Status Indicators"})," - Visual feedback for transformation processes"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Responsive Design"})," - Adapts to different screen sizes"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(e.p,{children:"The Transformer Page is included in the main package:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm install pkg-fe-react-goblin-system\n"})}),"\n",(0,r.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(e.p,{children:"Import and use the Transformer Page component:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { TransformerPage } from 'pkg-fe-react-goblin-system/pages/Transformer';\n\nfunction MyDataTransformer() {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const handleTransform = () => {\n    setIsProcessing(true);\n    // Process data transformation\n    const result = someTransformFunction(input);\n    setOutput(result);\n    setIsProcessing(false);\n  };\n  \n  return (\n    <TransformerPage\n      title=\"Data Transformer\"\n      inputLabel=\"Input JSON\"\n      outputLabel=\"Transformed JSON\"\n      inputValue={input}\n      outputValue={output}\n      onInputChange={setInput}\n      onTransform={handleTransform}\n      isProcessing={isProcessing}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(e.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Prop"}),(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{children:"Default"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"title"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'Data Transformer'"})}),(0,r.jsx)(e.td,{children:"Title of the transformer page"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"description"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"undefined"})}),(0,r.jsx)(e.td,{children:"Optional description of the transformer functionality"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"inputLabel"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'Input'"})}),(0,r.jsx)(e.td,{children:"Label for the input section"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"outputLabel"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'Output'"})}),(0,r.jsx)(e.td,{children:"Label for the output section"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"inputValue"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"''"})}),(0,r.jsx)(e.td,{children:"Current input value"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"outputValue"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"''"})}),(0,r.jsx)(e.td,{children:"Current output value"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"onInputChange"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"(value: string) => void"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"undefined"})}),(0,r.jsx)(e.td,{children:"Handler for input changes"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"onTransform"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"() => void"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"undefined"})}),(0,r.jsx)(e.td,{children:"Handler for transform button click"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"isProcessing"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"boolean"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"false"})}),(0,r.jsx)(e.td,{children:"Whether a transformation is in progress"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"transformButtonText"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'Transform'"})}),(0,r.jsx)(e.td,{children:"Text for the transform button"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"resetButtonText"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'Reset'"})}),(0,r.jsx)(e.td,{children:"Text for the reset button"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"showReset"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"boolean"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"true"})}),(0,r.jsx)(e.td,{children:"Whether to show the reset button"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"onReset"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"() => void"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"undefined"})}),(0,r.jsx)(e.td,{children:"Handler for reset button click"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"inputHeight"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'300px'"})}),(0,r.jsx)(e.td,{children:"Height of the input textarea"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"outputHeight"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'300px'"})}),(0,r.jsx)(e.td,{children:"Height of the output textarea"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"layout"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'horizontal' | 'vertical'"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"'horizontal'"})}),(0,r.jsx)(e.td,{children:"Layout orientation"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"className"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"string"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"''"})}),(0,r.jsx)(e.td,{children:"Additional CSS class names"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(e.h3,{id:"basic-transformer",children:"Basic Transformer"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { TransformerPage } from 'pkg-fe-react-goblin-system/pages/Transformer';\n\nfunction JsonFormatter() {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const formatJson = () => {\n    setIsProcessing(true);\n    try {\n      const parsed = JSON.parse(input);\n      setOutput(JSON.stringify(parsed, null, 2));\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n    }\n    setIsProcessing(false);\n  };\n  \n  const handleReset = () => {\n    setInput('');\n    setOutput('');\n  };\n  \n  return (\n    <TransformerPage\n      title=\"JSON Formatter\"\n      description=\"Format and validate your JSON data\"\n      inputLabel=\"Raw JSON\"\n      outputLabel=\"Formatted JSON\"\n      inputValue={input}\n      outputValue={output}\n      onInputChange={setInput}\n      onTransform={formatJson}\n      onReset={handleReset}\n      isProcessing={isProcessing}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"vertical-layout-with-custom-heights",children:"Vertical Layout with Custom Heights"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'<TransformerPage\n  title="Code Converter"\n  inputLabel="JavaScript"\n  outputLabel="TypeScript"\n  inputValue={jsCode}\n  outputValue={tsCode}\n  onInputChange={setJsCode}\n  onTransform={convertToTypeScript}\n  layout="vertical"\n  inputHeight="400px"\n  outputHeight="500px"\n/>\n'})}),"\n",(0,r.jsx)(e.h3,{id:"transformer-with-custom-controls",children:"Transformer with Custom Controls"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { \n  TransformerPage, \n  Container, \n  Grid, \n  Col,\n  Select,\n  Switch\n} from 'pkg-fe-react-goblin-system';\n\nfunction AdvancedTransformer() {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [format, setFormat] = useState('json');\n  const [minify, setMinify] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const transform = () => {\n    setIsProcessing(true);\n    // Perform transformation based on format and minify options\n    // ...\n    setIsProcessing(false);\n  };\n  \n  // Custom controls to insert between input and output\n  const customControls = (\n    <Container my={3}>\n      <Grid>\n        <Col xs={6}>\n          <Select\n            label=\"Output Format\"\n            value={format}\n            onChange={(e) => setFormat(e.target.value)}\n            options={[\n              { value: 'json', label: 'JSON' },\n              { value: 'yaml', label: 'YAML' },\n              { value: 'xml', label: 'XML' },\n            ]}\n          />\n        </Col>\n        <Col xs={6}>\n          <Switch\n            label=\"Minify Output\"\n            checked={minify}\n            onChange={() => setMinify(!minify)}\n          />\n        </Col>\n      </Grid>\n    </Container>\n  );\n  \n  return (\n    <TransformerPage\n      title=\"Data Format Converter\"\n      inputLabel=\"Input Data\"\n      outputLabel=\"Converted Data\"\n      inputValue={input}\n      outputValue={output}\n      onInputChange={setInput}\n      onTransform={transform}\n      isProcessing={isProcessing}\n      customControls={customControls}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"design-and-implementation",children:"Design and Implementation"}),"\n",(0,r.jsx)(e.p,{children:"The Transformer Page uses the following Goblin System components:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Container"})," and ",(0,r.jsx)(e.code,{children:"Grid"})," for layout (replacing previous Flex components)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Text"})," for displaying labels and messages"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"TextArea"})," for input and output fields"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Button"})," for action buttons"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Spinner"})," for loading indicators (replacing previous ProgressBar components)"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"The layout is responsive and will adapt to different screen sizes."}),"\n",(0,r.jsx)(e.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(e.h3,{id:"with-file-uploads",children:"With File Uploads"}),"\n",(0,r.jsx)(e.p,{children:"You can extend the Transformer Page to support file uploads:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport { \n  TransformerPage, \n  FileUpload, \n  Button, \n  Container \n} from 'pkg-fe-react-goblin-system';\n\nfunction FileTransformer() {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const handleFileUpload = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setInput(e.target.result);\n    };\n    reader.readAsText(file);\n  };\n  \n  const handleDownload = () => {\n    if (!output) return;\n    \n    const blob = new Blob([output], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'transformed-data.txt';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  \n  // Custom header with file upload\n  const customHeader = (\n    <Container mb={3}>\n      <FileUpload \n        onFileSelect={handleFileUpload} \n        accept=\".txt,.json,.csv\"\n        buttonText=\"Upload Input File\"\n      />\n    </Container>\n  );\n  \n  // Custom footer with download button\n  const customFooter = (\n    <Container mt={3}>\n      <Button \n        onClick={handleDownload} \n        disabled={!output}\n        variant=\"secondary\"\n      >\n        Download Output\n      </Button>\n    </Container>\n  );\n  \n  return (\n    <TransformerPage\n      title=\"File Transformer\"\n      inputLabel=\"File Content\"\n      outputLabel=\"Transformed Content\"\n      inputValue={input}\n      outputValue={output}\n      onInputChange={setInput}\n      onTransform={transformData}\n      isProcessing={isProcessing}\n      customHeader={customHeader}\n      customFooter={customFooter}\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"accessibility-considerations",children:"Accessibility Considerations"}),"\n",(0,r.jsx)(e.p,{children:"The Transformer Page is built with accessibility in mind:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"All inputs have associated labels"}),"\n",(0,r.jsx)(e.li,{children:"Processing states are announced to screen readers"}),"\n",(0,r.jsx)(e.li,{children:"Focus is managed properly during transformations"}),"\n",(0,r.jsx)(e.li,{children:"Keyboard navigation works across all controls"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"customization",children:"Customization"}),"\n",(0,r.jsx)(e.h3,{id:"styling",children:"Styling"}),"\n",(0,r.jsx)(e.p,{children:"You can customize the styling of the Transformer Page by applying custom CSS:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'<TransformerPage\n  className="custom-transformer"\n  title="Custom Styled Transformer"\n  // other props\n/>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".custom-transformer {\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.custom-transformer textarea {\n  font-family: 'Fira Code', monospace;\n  line-height: 1.5;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"building-a-custom-transformer",children:"Building a Custom Transformer"}),"\n",(0,r.jsx)(e.p,{children:"For more advanced customization, you can create your own transformer component using Goblin System's base components:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'import React, { useState } from \'react\';\nimport { \n  Container, \n  Grid, \n  Col, \n  Text, \n  TextArea, \n  Button,\n  Spinner\n} from \'pkg-fe-react-goblin-system\';\n\nfunction CustomTransformer({ title, onTransform }) {\n  const [input, setInput] = useState(\'\');\n  const [output, setOutput] = useState(\'\');\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const handleTransform = async () => {\n    if (!input) return;\n    \n    setIsProcessing(true);\n    try {\n      const result = await onTransform(input);\n      setOutput(result);\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  const handleReset = () => {\n    setInput(\'\');\n    setOutput(\'\');\n  };\n  \n  return (\n    <Container>\n      <Text variant="h2" mb={4}>{title}</Text>\n      \n      <Grid spacing={4}>\n        <Col xs={12} md={6}>\n          <Text variant="h4" mb={2}>Input</Text>\n          <TextArea\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder="Enter your data here..."\n            rows={10}\n            width="100%"\n          />\n        </Col>\n        \n        <Col xs={12} md={6}>\n          <Text variant="h4" mb={2}>Output</Text>\n          <TextArea\n            value={output}\n            readOnly\n            placeholder="Transformed data will appear here..."\n            rows={10}\n            width="100%"\n          />\n        </Col>\n      </Grid>\n      \n      <Container mt={4} textAlign="center">\n        <Button \n          onClick={handleTransform}\n          disabled={!input || isProcessing}\n          variant="primary"\n          mr={2}\n        >\n          {isProcessing ? (\n            <>\n              <Spinner size="sm" mr={2} />\n              Processing...\n            </>\n          ) : \'Transform\'}\n        </Button>\n        \n        <Button \n          onClick={handleReset}\n          variant="secondary"\n        >\n          Reset\n        </Button>\n      </Container>\n    </Container>\n  );\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}}}]);