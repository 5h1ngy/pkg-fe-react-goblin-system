{"version":3,"file":"index.mjs","sources":["../../../src/components/LiquidTable/shared/utils.ts","../../../src/components/LiquidTable/shared/Provider.tsx","../../../src/components/LiquidTable/shared/hooks.tsx","../../../src/components/LiquidTable/Header.tsx","../../../src/components/LiquidTable/Body.tsx","../../../src/components/LiquidTable/Pagination.tsx","../../../src/components/LiquidTable/ActionBar.tsx","../../../src/components/LiquidTable/LiquidTable.tsx","../../../src/components/LiquidTable/index.ts"],"sourcesContent":["import { ParsedColumn, ParsedRow, ParsedTableData } from \"../liquidTable.types\";\r\n\r\n/**\r\n * Trasforma una stringa camelCase in una forma \"First Name\".\r\n * - La prima lettera viene messa maiuscola.\r\n * - Eventuali ulteriori lettere maiuscole vengono precedute da uno spazio.\r\n */\r\nfunction prettifyFieldName(fieldName: string): string {\r\n    if (!fieldName) return \"\";\r\n\r\n    // 1. Inserisce uno spazio prima di ogni lettera maiuscola (tranne la prima).\r\n    //    Esempio: \"firstName\" -> \"first Name\"\r\n    //    Poi la prima lettera verrà capitalizzata nel passo successivo.\r\n    let spaced = fieldName.replace(/([A-Z])/g, \" $1\");\r\n\r\n    // 2. Trim per rimuovere eventuali spazi iniziali\r\n    spaced = spaced.trim();\r\n\r\n    // 3. Capitalizza la prima lettera dell'intera stringa\r\n    return spaced.charAt(0).toUpperCase() + spaced.slice(1);\r\n}\r\n\r\nexport function parseItems(items: Record<string, any>[], hiddenFields: string[] = []): ParsedTableData {\r\n    if (!items || items.length === 0) {\r\n        return { columns: [], rows: [] };\r\n    }\r\n\r\n    const allFields = new Set<string>();\r\n    items.forEach((obj) => {\r\n        Object.keys(obj).forEach((key) => allFields.add(key));\r\n    });\r\n\r\n    const columns: ParsedColumn[] = Array.from(allFields).map((fieldKey) => {\r\n        const shouldHide = hiddenFields.includes(fieldKey);\r\n\r\n        return { field: fieldKey, label: prettifyFieldName(fieldKey), visible: !shouldHide, isNumeric: false, };\r\n    });\r\n\r\n    // Creiamo le righe\r\n    const rows: ParsedRow[] = items.map((item, index) => ({\r\n        id: item.id ?? String(index),\r\n        data: item,\r\n    }));\r\n\r\n    return { columns, rows };\r\n}","import React, { createContext, useState, FC } from 'react';\r\nimport { parseItems } from './utils';\r\nimport { ComponentProps, ContextType } from '../liquidTable.types';\r\n\r\nexport const Context = createContext<ContextType | undefined>(undefined);\r\n\r\nconst withContext = <P extends object>(WrappedComponent: React.ComponentType<P>): FC<ComponentProps & P> => {\r\n  const Provider: FC<ComponentProps & P> = (props) => {\r\n    const { columns, rows } = parseItems(props.items, props.hiddenFields);\r\n    const [selection, setSelection] = useState<string[]>([]);\r\n\r\n    return (\r\n      <Context.Provider\r\n        value={{\r\n          columns,\r\n          rows,\r\n          pagination: props.pagination,\r\n          select: { selection, setSelection },\r\n        }}\r\n      >\r\n        <WrappedComponent {...props} />\r\n      </Context.Provider>\r\n    );\r\n  };\r\n\r\n  return Provider;\r\n};\r\n\r\nexport default withContext;\r\n","import { useContext } from \"react\";\r\nimport { ContextType } from \"../liquidTable.types\";\r\nimport { Context } from \"./Provider\";\r\n\r\nexport const useTableContext = (): ContextType => {\r\n    const context = useContext(Context);\r\n    if (!context) {\r\n        throw new Error('useTableContext must be used within LiquidTable');\r\n    }\r\n\r\n    return context;\r\n};","import { FC } from \"react\";\r\nimport { Table } from \"@chakra-ui/react\"\r\n\r\nimport { Checkbox } from \"@/components/Factory/Chakra/checkbox\";\r\n\r\nimport { useTableContext } from \"./shared/hooks\";\r\n\r\nconst DynamicTable: FC = () => {\r\n    const { columns, rows, select } = useTableContext();\r\n\r\n    const hasSelection = select.selection.length > 0;\r\n    const indeterminate = hasSelection && select.selection.length < rows.length;\r\n\r\n    return <Table.Header>\r\n        <Table.Row bg=\"bg.subtle\">\r\n            <Table.ColumnHeader w=\"6\">\r\n                <Checkbox\r\n                    top=\"1\" aria-label=\"Select all rows\"\r\n                    checked={indeterminate ? \"indeterminate\" : select.selection.length > 0}\r\n                    onCheckedChange={(changes: { checked: boolean }) => changes.checked\r\n                        ? select.setSelection(rows.map((row) => row.id))\r\n                        : select.setSelection([])\r\n                    }\r\n                />\r\n            </Table.ColumnHeader>\r\n\r\n            {/* Colonne dinamiche (filtrando quelle visibili) */}\r\n            {columns.filter((col) => col.visible).map((col) =>\r\n                <Table.ColumnHeader key={crypto.randomUUID()}\r\n                    textAlign={col.isNumeric ? \"end\" : \"start\"}\r\n                >\r\n                    {col.label}\r\n                </Table.ColumnHeader>\r\n            )}\r\n        </Table.Row>\r\n    </Table.Header>\r\n};\r\n\r\nexport default DynamicTable;\r\n","import { FC } from \"react\";\r\nimport { Table } from \"@chakra-ui/react\"\r\n\r\nimport { Checkbox } from \"@/components/Factory/Chakra/checkbox\";\r\nimport { useTableContext } from \"./shared/hooks\";\r\n\r\nconst DynamicTable: FC = () => {\r\n    const { columns, rows, select } = useTableContext();\r\n\r\n    return <Table.Body>\r\n        {rows.map((row) => (\r\n            <Table.Row key={crypto.randomUUID()}>\r\n                <Table.Cell>\r\n                    <Checkbox\r\n                        top=\"1\"\r\n                        aria-label=\"Select row\"\r\n                        checked={select.selection.includes(row.id)}\r\n                        onCheckedChange={(changes: { checked: boolean }) => select.setSelection((prev) => changes.checked\r\n                            ? [...prev, row.id]\r\n                            : prev.filter((id) => id !== row.id))\r\n                        }\r\n                    />\r\n                </Table.Cell>\r\n\r\n                {/* Celle dinamiche per ogni colonna visibile */}\r\n                {columns\r\n                    .filter((col) => col.visible)\r\n                    .map((col) =>\r\n                        <Table.Cell key={crypto.randomUUID()}\r\n                            textAlign={col.isNumeric ? \"end\" : \"start\"}\r\n                        >\r\n                            {row.data[col.field] == null ? \"/\" : row.data[col.field]}\r\n                        </Table.Cell>\r\n                    )}\r\n            </Table.Row>\r\n        ))}\r\n    </Table.Body>\r\n};\r\n\r\nexport default DynamicTable;\r\n","import { FC } from \"react\";\r\nimport { HStack } from \"@chakra-ui/react\"\r\n\r\nimport { PaginationItems, PaginationNextTrigger, PaginationPrevTrigger, PaginationRoot, } from \"@/components/Factory/Chakra/pagination\"\r\n\r\nimport { useTableContext } from \"./shared/hooks\";\r\n\r\nconst Pagination: FC = () => {\r\n    const { pagination } = useTableContext();\r\n\r\n    return pagination && <PaginationRoot\r\n        padding={\"0.3rem\"}\r\n        count={pagination.totalPages}\r\n        width={\"fit-content\"}\r\n        pageSize={pagination.size}\r\n        page={pagination.offset}\r\n        borderRadius={\"10px\"}\r\n        backgroundColor=\"gray.100\"\r\n        _dark={{ backgroundColor: \"gray.950\" }}\r\n    >\r\n        <HStack wrap=\"wrap\">\r\n            <PaginationPrevTrigger />\r\n            <PaginationItems />\r\n            <PaginationNextTrigger />\r\n        </HStack>\r\n    </PaginationRoot>\r\n};\r\n\r\nexport default Pagination;\r\n","import { FC, useEffect } from \"react\";\r\nimport { Kbd } from \"@chakra-ui/react\"\r\n\r\nimport { Button } from \"@/components/Factory/Chakra/button\";\r\nimport { ActionBarContent, ActionBarRoot, ActionBarSelectionTrigger, ActionBarSeparator, } from \"@/components/Factory/Chakra/action-bar\";\r\n\r\nimport { useTableContext } from \"./shared/hooks\";\r\n\r\nconst DynamicTable: FC = () => {\r\n    const { select } = useTableContext();\r\n    const hasSelection = select.selection.length > 0;\r\n\r\n    useEffect(() => {\r\n        const elements = document.getElementsByClassName(\"chakra-action-bar__positioner\");\r\n        for (let i = 0; i < elements.length; i++) {\r\n            (elements[i] as HTMLElement).style.zIndex = \"9999\";\r\n        }\r\n    }, []);\r\n\r\n    return <ActionBarRoot open={hasSelection}>\r\n        <ActionBarContent>\r\n            <ActionBarSelectionTrigger>\r\n                {select.selection.length} selected\r\n            </ActionBarSelectionTrigger>\r\n            <ActionBarSeparator />\r\n            <Button variant=\"outline\" size=\"sm\">\r\n                Delete <Kbd>⌫</Kbd>\r\n            </Button>\r\n            <Button variant=\"outline\" size=\"sm\">\r\n                Share <Kbd>T</Kbd>\r\n            </Button>\r\n        </ActionBarContent>\r\n    </ActionBarRoot>\r\n};\r\n\r\nexport default DynamicTable;\r\n","import { FC } from \"react\";\r\nimport { Stack } from \"@chakra-ui/react\"\r\nimport { Table } from \"@chakra-ui/react\"\r\n\r\nimport Header from \"./Header\";\r\nimport Body from \"./Body\";\r\nimport Pagination from \"./Pagination\";\r\nimport ActionBar from \"./ActionBar\";\r\n\r\nconst LiquidTable: FC = () => {\r\n\r\n    return (\r\n        <Stack width=\"full\" gap=\"3\" alignItems={\"flex-end\"}>\r\n\r\n            <Pagination />\r\n\r\n            <Table.ScrollArea borderWidth=\"1px\" rounded=\"md\" width=\"100%\" height=\"100%\">\r\n                <Table.Root size=\"lg\" stickyHeader interactive>\r\n                    <Header />\r\n                    <Body />\r\n                </Table.Root>\r\n            </Table.ScrollArea>\r\n\r\n            <ActionBar />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default LiquidTable;\r\n","import withContext from \"./shared/Provider\";\r\nimport LiquidTable from \"./LiquidTable\";\r\nexport type { Item } from \"./liquidTable.types\";\r\n\r\nexport default withContext(LiquidTable);"],"names":["prettifyFieldName","fieldName","spaced","parseItems","items","hiddenFields","allFields","obj","key","columns","fieldKey","shouldHide","rows","item","index","Context","createContext","withContext","WrappedComponent","props","selection","setSelection","useState","jsx","useTableContext","context","useContext","DynamicTable","select","indeterminate","Table","Checkbox","changes","row","col","jsxs","prev","id","Pagination","pagination","PaginationRoot","HStack","PaginationPrevTrigger","PaginationItems","PaginationNextTrigger","hasSelection","useEffect","elements","i","ActionBarRoot","ActionBarContent","ActionBarSelectionTrigger","ActionBarSeparator","Button","Kbd","LiquidTable","Stack","Header","Body","ActionBar"],"mappings":"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"}