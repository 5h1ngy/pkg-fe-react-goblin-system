{"version":3,"file":"index.mjs","sources":["../../../src/components/RegisterForm/RegisterForm.form.tsx","../../../src/components/RegisterForm/RegisterForm.tsx"],"sourcesContent":["import { z } from 'zod';\r\nimport { withMeta } from '@/components/Factory/DynamicForm/DynamicForm';\r\n\r\nconst schema = z.object({\r\n    /**\r\n     * STEP: 0\r\n     */\r\n    \"first_name\": withMeta(\r\n        z.string().trim()\r\n            .min(2, {\r\n                message: 'Il nome deve contenere almeno 2 caratteri'\r\n            })\r\n            .max(50, {\r\n                message: 'Il nome non può superare i 50 caratteri'\r\n            }),\r\n        { label: 'Nome', autocomplete: \"first-name\", row: 'row-1', step: 0 }\r\n    ),\r\n    \"last_name\": withMeta(\r\n        z.string().trim()\r\n            .min(2, {\r\n                message: 'Il cognome deve contenere almeno 2 caratteri'\r\n            })\r\n            .max(50, {\r\n                message: 'Il cognome non può superare i 50 caratteri'\r\n            }),\r\n        { label: 'Cognome', autocomplete: \"last-name\", row: 'row-1', step: 0 }\r\n    ),\r\n    \"bday\": withMeta(\r\n        z.coerce.date({\r\n            required_error: 'La data di nascita è obbligatoria',\r\n            invalid_type_error: 'Formato data non valido',\r\n        }).max(new Date(), {\r\n            message: 'La data non può essere nel futuro'\r\n        })\r\n            // .transform(date => date.toISOString().split(\"T\")[0]), // Converti in YYYY-MM-DD,\r\n            .transform(date => date.getTime()), // Converti in timestamp epoch\r\n        { label: 'Data di Nascita', autocomplete: \"bday\", row: 'row-2', step: 0 }\r\n    ),\r\n    /**\r\n     * STEP: 1\r\n     */\r\n    \"username\": withMeta(\r\n        z.string().trim(),\r\n        { label: 'Nickname', autocomplete: \"username\", step: 1, style: { width: { \"sm\": \"20rem\" } } }\r\n    ),\r\n    \"gender\": withMeta(\r\n        z.enum([\"male\", \"female\"]).nullable().default(null),\r\n        { label: 'Gender', labels: [\"Male\", \"Female\"], autocomplete: \"gender\", step: 1, style: { width: { \"sm\": \"20rem\" } } }\r\n    ),\r\n    /**\r\n     * STEP: 2\r\n     */\r\n    \"email\": withMeta(\r\n        z.string()\r\n            .trim()\r\n            .toLowerCase()\r\n            .email({ message: 'Inserisci un’email valida' }),\r\n        { label: 'Email', autocomplete: \"email\", row: 'row-3', step: 2 }\r\n    ),\r\n    \"confirm_email\": withMeta(\r\n        z.string()\r\n            .trim()\r\n            .toLowerCase()\r\n            .email({ message: 'Inserisci un’email valida' }),\r\n        { label: 'Ripeti Email', autocomplete: \"confirm-email\", row: 'row-3', step: 2 }\r\n    ),\r\n    \"password\": withMeta(\r\n        z.string()\r\n            .trim()\r\n            .min(6, { message: 'La password deve contenere almeno 6 caratteri' })\r\n            .max(100, { message: 'La password non può superare i 100 caratteri' })\r\n            .regex(/[A-Z]/, { message: 'La password deve contenere almeno una lettera maiuscola' })\r\n            .regex(/\\d/, { message: 'La password deve contenere almeno un numero' }),\r\n        { label: 'Password', autocomplete: \"password\", row: 'row-4', step: 2 }\r\n    ),\r\n    \"confirm_password\": withMeta(\r\n        z.string()\r\n            .trim()\r\n            .min(6, { message: 'La password deve contenere almeno 6 caratteri' })\r\n            .max(100, { message: 'La password non può superare i 100 caratteri' }),\r\n        { label: 'Ripeti Password', autocomplete: \"confirm-password\", row: 'row-4', step: 2 }\r\n    ),\r\n}).superRefine((data, ctx) => {\r\n    // Controllo che email e conferma email siano uguali\r\n    if (data.email !== data.confirm_email) {\r\n        ctx.addIssue({\r\n            code: z.ZodIssueCode.custom,\r\n            message: 'Le email non coincidono.',\r\n            path: ['confirm_email'],\r\n        });\r\n    }\r\n\r\n    // Controllo che password e conferma password siano uguali\r\n    if (data.password !== data.confirm_password) {\r\n        ctx.addIssue({\r\n            code: z.ZodIssueCode.custom,\r\n            message: 'Le password non coincidono.',\r\n            path: ['confirm_password'],\r\n        });\r\n    }\r\n});\r\n\r\nconst inputs = schema.innerType()\r\ntype FormInputs = z.infer<typeof inputs>;\r\n\r\nexport { schema };\r\nexport type { FormInputs };\r\n","import { FC, useState } from \"react\";\r\nimport { Card, HStack, VStack } from \"@chakra-ui/react\"\r\nimport { Image } from \"@chakra-ui/react\"\r\nimport { Heading, Stack } from \"@chakra-ui/react\"\r\n\r\nimport DynamicForm from '@/components/Factory/DynamicForm/DynamicForm';\r\nimport { Button } from \"@/components/Factory/Chakra/button\"\r\n\r\nimport { schema } from \"./RegisterForm.form\"\r\nimport { ComponentProps } from \"./registerForm.types\";\r\n\r\nconst RegisterForm: FC<ComponentProps> = ({ rootStyle, children, submit }) => {\r\n    const [step, setStep] = useState(0)\r\n    const [stepComplete, setStepComplete] = useState(false)\r\n\r\n    async function next(step: number, stepComplete: boolean) {\r\n        setStep(step)\r\n        setStepComplete(stepComplete)\r\n    }\r\n\r\n    async function back(step: number, stepComplete: boolean) {\r\n        setStep(step)\r\n        setStepComplete(stepComplete)\r\n    }\r\n\r\n    return <Card.Root flexDirection=\"row\" borderRadius={\"10px\"} {...rootStyle}>\r\n        <HStack gap={\"1rem\"} padding={\"2rem\"} justifyContent={\"center\"}>\r\n\r\n            <Image borderRadius={\"10px\"}\r\n                display={{ base: \"none\", lg: \"block\" }}\r\n                objectFit=\"cover\"\r\n                height=\"15rem\"\r\n                src={`${import.meta.env.VITE_BASENAME}/assets/background_card_register.png`}\r\n                alt=\"\"\r\n            />\r\n\r\n            <VStack>\r\n\r\n                <VStack>\r\n                    <Heading textStyle=\"4xl\">Registrazione</Heading>\r\n                    {children}\r\n                </VStack>\r\n\r\n                <DynamicForm schema={schema} step={step} onNext={next} onBack={back}\r\n                    render={(rows: React.ReactNode[], onSubmit: Function, onNext?: Function, onBack?: Function,) => <>\r\n                        <Card.Body>\r\n                            <Stack gap=\"4\" width={{ md: \"fit-content\" }}>\r\n                                {rows}\r\n                            </Stack>\r\n                        </Card.Body>\r\n                        <Card.Footer justifyContent=\"flex-end\" paddingY=\"1rem\" flexWrap={\"wrap\"}>\r\n                            {step !== 0 && <Button onClick={() => onBack!()} variant=\"outline\" colorPalette={\"cyan\"} width={\"40%\"}>Indietro</Button>}\r\n                            {!stepComplete\r\n                                ? <Button onClick={() => onNext!()} variant=\"subtle\" colorPalette={\"cyan\"} width={\"40%\"}>Avanti</Button>\r\n                                : <Button onClick={onSubmit(submit)} variant=\"solid\" colorPalette={\"cyan\"} width={\"40%\"}>Crea Account</Button>\r\n                            }\r\n                        </Card.Footer>\r\n                    </>}\r\n                />\r\n            </VStack>\r\n        </HStack>\r\n    </Card.Root>\r\n}\r\n\r\nexport default RegisterForm"],"names":["step","stepComplete","jsxs","jsx","Fragment"],"mappings":"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"}