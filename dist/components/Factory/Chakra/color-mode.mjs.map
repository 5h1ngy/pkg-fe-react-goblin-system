{"version":3,"file":"color-mode.mjs","sources":["../../../../src/components/Factory/Chakra/color-mode.tsx"],"sourcesContent":[";\r\n\r\nimport type { ConditionalValue, IconButtonProps } from \"@chakra-ui/react\";\r\nimport { ClientOnly, IconButton, Skeleton } from \"@chakra-ui/react\";\r\nimport { ThemeProvider, useTheme } from \"next-themes\";\r\nimport type { ThemeProviderProps } from \"next-themes\";\r\nimport { forwardRef } from \"react\";\r\nimport { HiSun, HiMoon } from \"react-icons/hi2\";\r\nimport { LuMoon, LuSun } from \"react-icons/lu\";\r\nimport { Tabs } from \"@chakra-ui/react\"\r\n\r\n// Interfaccia che estende le proprietà di ThemeProvider\r\nexport interface ColorModeProviderProps extends ThemeProviderProps { }\r\n\r\n// Componente per fornire il contesto del tema a tutta l'applicazione\r\nexport function ColorModeProvider(props: ColorModeProviderProps) {\r\n  return <ThemeProvider attribute=\"class\" disableTransitionOnChange {...props} />;\r\n}\r\n\r\n// Hook personalizzato per ottenere e gestire la modalità colore (chiaro/scuro)\r\nexport function useColorMode() {\r\n  const { resolvedTheme, setTheme } = useTheme();\r\n\r\n  // Funzione per alternare la modalità colore\r\n  const toggleColorMode = () => {\r\n    setTheme(resolvedTheme === \"light\" ? \"dark\" : \"light\");\r\n  };\r\n\r\n  return {\r\n    colorMode: resolvedTheme,\r\n    setColorMode: setTheme,\r\n    toggleColorMode,\r\n  };\r\n}\r\n\r\n// Hook per ottenere un valore diverso in base alla modalità colore\r\nexport function useColorModeValue<T>(light: T, dark: T): T {\r\n  const { colorMode } = useColorMode();\r\n  return colorMode === \"light\" ? light : dark;\r\n}\r\n\r\n// Componente icona che mostra un'icona diversa in base alla modalità colore\r\nexport function ColorModeIcon() {\r\n  const { colorMode } = useColorMode();\r\n  return colorMode === \"light\" ? <LuSun /> : <LuMoon />;\r\n}\r\n\r\n// Proprietà per il bottone di cambio modalità colore esteso\r\ninterface ColorModeButtonProps extends Omit<IconButtonProps, \"aria-label\"> { }\r\n\r\n\r\ninterface ColorModeButtonExtendedProps {\r\n  variant: ConditionalValue<\"outline\" | \"line\" | \"subtle\" | \"plain\" | \"enclosed\" | undefined>;\r\n  size: ConditionalValue<'sm' | 'md' | 'lg'>;\r\n}\r\n\r\n// Componente esteso di bottone per il cambio della modalità colore con controllo segmentato\r\nexport const ColorModeButtonExtended = function ColorModeButtonExtended(props: ColorModeButtonExtendedProps) {\r\n  const { toggleColorMode, colorMode } = useColorMode();\r\n  const { variant, size } = props;\r\n\r\n  return (\r\n    // Usa ClientOnly per assicurarsi che il componente venga renderizzato solo sul client\r\n    <ClientOnly fallback={<Skeleton boxSize=\"8\" />}>\r\n\r\n      <Tabs.Root key={crypto.randomUUID()} defaultValue={colorMode} variant={variant} size={size} onValueChange={toggleColorMode}\r\n      // 'gray' | 'red' | 'orange' | 'yellow' | 'green' | 'teal' | 'blue' | 'cyan' | 'purple' | 'pink' | 'accent'\r\n      // colorPalette={'red'}\r\n      >\r\n        <Tabs.List\r\n          backgroundColor={\"gray.100\"} _dark={{ backgroundColor: \"gray.950\", }}\r\n        >\r\n          <Tabs.Trigger value=\"light\">\r\n            <HiSun />\r\n          </Tabs.Trigger>\r\n          <Tabs.Trigger value=\"dark\">\r\n            <HiMoon />\r\n          </Tabs.Trigger>\r\n        </Tabs.List>\r\n      </ Tabs.Root>\r\n    </ClientOnly>\r\n  );\r\n};\r\n\r\n// Bottone per il cambio di modalità colore con IconButton\r\nexport const ColorModeButton = forwardRef<HTMLButtonElement, ColorModeButtonProps>(function ColorModeButton(props, ref) {\r\n  const { toggleColorMode } = useColorMode();\r\n\r\n  return (\r\n    // Usa ClientOnly per garantire che il bottone venga renderizzato solo sul client\r\n    <ClientOnly fallback={<Skeleton boxSize=\"8\" />}>\r\n      <IconButton\r\n        onClick={toggleColorMode}\r\n        variant=\"ghost\"\r\n        aria-label=\"Toggle color mode\"\r\n        size=\"sm\"\r\n        ref={ref}\r\n        {...props}\r\n        // Stile personalizzato per l'icona del bottone\r\n        css={{ _icon: { width: \"5\", height: \"5\" } }}\r\n      >\r\n        <ColorModeIcon />\r\n      </IconButton>\r\n    </ClientOnly>\r\n  );\r\n});\r\n"],"names":["ThemeProvider","useTheme","jsx","ColorModeButtonExtended","jsxs","ColorModeButton"],"mappings":";;;;;;AAeO,SAAS,kBAAkB,OAA+B;AAC/D,+CAAQA,GAAc,EAAA,WAAU,SAAQ,2BAAyB,MAAE,GAAG,OAAO;AAC/E;AAGO,SAAS,eAAe;AAC7B,QAAM,EAAE,eAAe,SAAS,IAAIC,EAAS;AAG7C,QAAM,kBAAkB,MAAM;AACnB,aAAA,kBAAkB,UAAU,SAAS,OAAO;AAAA,EACvD;AAEO,SAAA;AAAA,IACL,WAAW;AAAA,IACX,cAAc;AAAA,IACd;AAAA,EACF;AACF;AAGgB,SAAA,kBAAqB,OAAU,MAAY;AACnD,QAAA,EAAE,UAAU,IAAI,aAAa;AAC5B,SAAA,cAAc,UAAU,QAAQ;AACzC;AAGO,SAAS,gBAAgB;AACxB,QAAA,EAAE,UAAU,IAAI,aAAa;AACnC,SAAO,cAAc,UAAUC,sCAAC,OAAM,CAAA,CAAA,0CAAM,QAAO,EAAA;AACrD;AAYa,MAAA,0BAA0B,SAASC,yBAAwB,OAAqC;AAC3G,QAAM,EAAE,iBAAiB,UAAU,IAAI,aAAa;AAC9C,QAAA,EAAE,SAAS,KAAA,IAAS;AAE1B;AAAA;AAAA,0CAEG,YAAW,EAAA,gDAAW,UAAS,EAAA,SAAQ,KAAI,GAE1C,UAAAD,kCAAA;AAAA,MAAC,KAAK;AAAA,MAAL;AAAA,QAAoC,cAAc;AAAA,QAAW;AAAA,QAAkB;AAAA,QAAY,eAAe;AAAA,QAIzG,UAAAE,kCAAA;AAAA,UAAC,KAAK;AAAA,UAAL;AAAA,YACC,iBAAiB;AAAA,YAAY,OAAO,EAAE,iBAAiB,WAAY;AAAA,YAEnE,UAAA;AAAA,cAAAF,kCAAAA,IAAC,KAAK,SAAL,EAAa,OAAM,SAClB,UAAAA,sCAAC,QAAM,CAAA,GACT;AAAA,cACAA,sCAAC,KAAK,SAAL,EAAa,OAAM,QAClB,UAAAA,kCAAA,IAAC,UAAO,EACV,CAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MACF;AAAA,MAbc,OAAO,WAAW;AAAA,IAAA,EAepC,CAAA;AAAA;AAEJ;AAGO,MAAM,kBAAkB,WAAoD,SAASG,iBAAgB,OAAO,KAAK;AAChH,QAAA,EAAE,gBAAgB,IAAI,aAAa;AAEzC;AAAA;AAAA,0CAEG,YAAW,EAAA,gDAAW,UAAS,EAAA,SAAQ,KAAI,GAC1C,UAAAH,kCAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,SAAS;AAAA,QACT,SAAQ;AAAA,QACR,cAAW;AAAA,QACX,MAAK;AAAA,QACL;AAAA,QACC,GAAG;AAAA,QAEJ,KAAK,EAAE,OAAO,EAAE,OAAO,KAAK,QAAQ,MAAM;AAAA,QAE1C,gDAAC,eAAc,CAAA,CAAA;AAAA,MAAA;AAAA,IAAA,EAEnB,CAAA;AAAA;AAEJ,CAAC;"}