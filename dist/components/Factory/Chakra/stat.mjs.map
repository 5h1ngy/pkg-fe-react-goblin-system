{"version":3,"file":"stat.mjs","sources":["../../../../src/components/Factory/Chakra/stat.tsx"],"sourcesContent":["import {\r\n  Badge,\r\n  type BadgeProps,\r\n  Stat as ChakraStat,\r\n  FormatNumber,\r\n  IconButton,\r\n} from \"@chakra-ui/react\"\r\nimport { ToggleTip } from \"./toggle-tip\"\r\nimport { forwardRef } from \"react\"\r\nimport { HiOutlineInformationCircle } from \"react-icons/hi\"\r\n\r\ninterface StatLabelProps extends ChakraStat.LabelProps {\r\n  info?: React.ReactNode\r\n}\r\n\r\nexport const StatLabel = forwardRef<HTMLDivElement, StatLabelProps>(\r\n  function StatLabel(props, ref) {\r\n    const { info, children, ...rest } = props\r\n    return (\r\n      <ChakraStat.Label {...rest} ref={ref}>\r\n        {children}\r\n        {info && (\r\n          <ToggleTip content={info}>\r\n            <IconButton variant=\"ghost\" aria-label=\"info\" size=\"2xs\">\r\n              <HiOutlineInformationCircle />\r\n            </IconButton>\r\n          </ToggleTip>\r\n        )}\r\n      </ChakraStat.Label>\r\n    )\r\n  },\r\n)\r\n\r\ninterface StatValueTextProps extends ChakraStat.ValueTextProps {\r\n  value?: number\r\n  formatOptions?: Intl.NumberFormatOptions\r\n}\r\n\r\nexport const StatValueText = forwardRef<HTMLDivElement, StatValueTextProps>(\r\n  function StatValueText(props, ref) {\r\n    const { value, formatOptions, children, ...rest } = props\r\n    return (\r\n      <ChakraStat.ValueText {...rest} ref={ref}>\r\n        {children ||\r\n          (value != null && <FormatNumber value={value} {...formatOptions} />)}\r\n      </ChakraStat.ValueText>\r\n    )\r\n  },\r\n)\r\n\r\nexport const StatUpTrend = forwardRef<HTMLDivElement, BadgeProps>(\r\n  function StatUpTrend(props, ref) {\r\n    return (\r\n      <Badge colorPalette=\"green\" gap=\"0\" {...props} ref={ref}>\r\n        <ChakraStat.UpIndicator />\r\n        {props.children}\r\n      </Badge>\r\n    )\r\n  },\r\n)\r\n\r\nexport const StatDownTrend = forwardRef<HTMLDivElement, BadgeProps>(\r\n  function StatDownTrend(props, ref) {\r\n    return (\r\n      <Badge colorPalette=\"red\" gap=\"0\" {...props} ref={ref}>\r\n        <ChakraStat.DownIndicator />\r\n        {props.children}\r\n      </Badge>\r\n    )\r\n  },\r\n)\r\n\r\nexport const StatRoot = ChakraStat.Root\r\nexport const StatHelpText = ChakraStat.HelpText\r\nexport const StatValueUnit = ChakraStat.ValueUnit\r\n"],"names":["StatLabel","forwardRef","props","ref","info","children","rest","ChakraStat","jsx","ToggleTip","IconButton","HiOutlineInformationCircle","StatValueText","value","formatOptions","FormatNumber","StatUpTrend","jsxs","Badge","StatDownTrend","StatRoot","StatHelpText","StatValueUnit"],"mappings":";;;;AAeO,MAAMA,IAAYC;AAAA,EACvB,SAAmBC,GAAOC,GAAK;AAC7B,UAAM,EAAE,MAAAC,GAAM,UAAAC,GAAU,GAAGC,EAAS,IAAAJ;AACpC,kCACGK,EAAW,OAAX,EAAkB,GAAGD,GAAM,KAAAH,GACzB,UAAA;AAAA,MAAAE;AAAA,MACAD,KACEI,gBAAAA,EAAAA,IAAAC,GAAA,EAAU,SAASL,GAClB,gCAACM,GAAW,EAAA,SAAQ,SAAQ,cAAW,QAAO,MAAK,OACjD,UAACF,gBAAAA,EAAAA,IAAAG,GAAA,EAA2B,GAC9B,EACF,CAAA;AAAA,IAAA,GAEJ;AAAA,EAAA;AAGN,GAOaC,IAAgBX;AAAA,EAC3B,SAAuBC,GAAOC,GAAK;AACjC,UAAM,EAAE,OAAAU,GAAO,eAAAC,GAAe,UAAAT,GAAU,GAAGC,EAAS,IAAAJ;AACpD,WACGM,gBAAAA,EAAAA,IAAAD,EAAW,WAAX,EAAsB,GAAGD,GAAM,KAAAH,GAC7B,UACEE,KAAAQ,KAAS,QAASL,gBAAAA,EAAAA,IAAAO,GAAA,EAAa,OAAAF,GAAe,GAAGC,EAAe,CAAA,GACrE;AAAA,EAAA;AAGN,GAEaE,IAAcf;AAAA,EACzB,SAAqBC,GAAOC,GAAK;AAE7B,WAAAc,gBAAAA,OAACC,KAAM,cAAa,SAAQ,KAAI,KAAK,GAAGhB,GAAO,KAAAC,GAC7C,UAAA;AAAA,MAACK,gBAAAA,MAAAD,EAAW,aAAX,EAAuB;AAAA,MACvBL,EAAM;AAAA,IAAA,GACT;AAAA,EAAA;AAGN,GAEaiB,IAAgBlB;AAAA,EAC3B,SAAuBC,GAAOC,GAAK;AAE/B,WAAAc,gBAAAA,OAACC,KAAM,cAAa,OAAM,KAAI,KAAK,GAAGhB,GAAO,KAAAC,GAC3C,UAAA;AAAA,MAACK,gBAAAA,MAAAD,EAAW,eAAX,EAAyB;AAAA,MACzBL,EAAM;AAAA,IAAA,GACT;AAAA,EAAA;AAGN,GAEakB,IAAWb,EAAW,MACtBc,IAAed,EAAW,UAC1Be,IAAgBf,EAAW;"}