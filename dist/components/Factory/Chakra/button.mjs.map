{"version":3,"file":"button.mjs","sources":["../../../../src/components/Factory/Chakra/button.tsx"],"sourcesContent":["import type { ButtonProps as ChakraButtonProps } from \"@chakra-ui/react\"\r\nimport {\r\n  AbsoluteCenter,\r\n  Button as ChakraButton,\r\n  Span,\r\n  Spinner,\r\n} from \"@chakra-ui/react\"\r\nimport { forwardRef } from \"react\"\r\n\r\ninterface ButtonLoadingProps {\r\n  loading?: boolean\r\n  loadingText?: React.ReactNode\r\n}\r\n\r\nexport interface ButtonProps extends ChakraButtonProps, ButtonLoadingProps {}\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n  function Button(props, ref) {\r\n    const { loading, disabled, loadingText, children, ...rest } = props\r\n    return (\r\n      <ChakraButton disabled={loading || disabled} ref={ref} {...rest}>\r\n        {loading && !loadingText ? (\r\n          <>\r\n            <AbsoluteCenter display=\"inline-flex\">\r\n              <Spinner size=\"inherit\" color=\"inherit\" />\r\n            </AbsoluteCenter>\r\n            <Span opacity={0}>{children}</Span>\r\n          </>\r\n        ) : loading && loadingText ? (\r\n          <>\r\n            <Spinner size=\"inherit\" color=\"inherit\" />\r\n            {loadingText}\r\n          </>\r\n        ) : (\r\n          children\r\n        )}\r\n      </ChakraButton>\r\n    )\r\n  },\r\n)\r\n"],"names":["Button","jsx","ChakraButton","jsxs","Fragment"],"mappings":";;;AAgBO,MAAM,SAAS;AAAA,EACpB,SAASA,QAAO,OAAO,KAAK;AAC1B,UAAM,EAAE,SAAS,UAAU,aAAa,UAAU,GAAG,SAAS;AAE5D,WAAAC,kCAAAA,IAACC,UAAa,EAAA,UAAU,WAAW,UAAU,KAAW,GAAG,MACxD,UAAA,WAAW,CAAC,cAETC,kCAAAA,KAAAC,kBAAAA,UAAA,EAAA,UAAA;AAAA,MAACH,kCAAAA,IAAA,gBAAA,EAAe,SAAQ,eACtB,UAAAA,kCAAA,IAAC,WAAQ,MAAK,WAAU,OAAM,UAAA,CAAU,EAC1C,CAAA;AAAA,MACCA,kCAAAA,IAAA,MAAA,EAAK,SAAS,GAAI,SAAS,CAAA;AAAA,IAAA,EAC9B,CAAA,IACE,WAAW,cAEXE,kCAAAA,KAAAC,kBAAAA,UAAA,EAAA,UAAA;AAAA,MAAAH,kCAAA,IAAC,SAAQ,EAAA,MAAK,WAAU,OAAM,WAAU;AAAA,MACvC;AAAA,IAAA,EACH,CAAA,IAEA,UAEJ;AAAA,EAAA;AAGN;"}