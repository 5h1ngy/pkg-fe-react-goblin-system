{"version":3,"file":"pagination.mjs","sources":["../../../../src/components/Factory/Chakra/pagination.tsx"],"sourcesContent":["\r\n\r\nimport type { ButtonProps, TextProps } from \"@chakra-ui/react\"\r\nimport {\r\n  Button,\r\n  Pagination as ChakraPagination,\r\n  IconButton,\r\n  Text,\r\n  createContext,\r\n  usePaginationContext,\r\n} from \"@chakra-ui/react\"\r\nimport { forwardRef, useMemo } from \"react\"\r\nimport {\r\n  HiChevronLeft,\r\n  HiChevronRight,\r\n  HiMiniEllipsisHorizontal,\r\n} from \"react-icons/hi2\"\r\nimport { LinkButton } from \"./link-button\"\r\n\r\ninterface ButtonVariantMap {\r\n  current: ButtonProps[\"variant\"]\r\n  default: ButtonProps[\"variant\"]\r\n  ellipsis: ButtonProps[\"variant\"]\r\n}\r\n\r\ntype PaginationVariant = \"outline\" | \"solid\" | \"subtle\"\r\n\r\ninterface ButtonVariantContext {\r\n  size: ButtonProps[\"size\"]\r\n  variantMap: ButtonVariantMap\r\n  getHref?: (page: number) => string\r\n}\r\n\r\nconst [RootPropsProvider, useRootProps] = createContext<ButtonVariantContext>({\r\n  name: \"RootPropsProvider\",\r\n})\r\n\r\nexport interface PaginationRootProps\r\n  extends Omit<ChakraPagination.RootProps, \"type\"> {\r\n  size?: ButtonProps[\"size\"]\r\n  variant?: PaginationVariant\r\n  getHref?: (page: number) => string\r\n}\r\n\r\nconst variantMap: Record<PaginationVariant, ButtonVariantMap> = {\r\n  outline: { default: \"ghost\", ellipsis: \"plain\", current: \"outline\" },\r\n  solid: { default: \"outline\", ellipsis: \"outline\", current: \"solid\" },\r\n  subtle: { default: \"ghost\", ellipsis: \"plain\", current: \"subtle\" },\r\n}\r\n\r\nexport const PaginationRoot = forwardRef<HTMLDivElement, PaginationRootProps>(\r\n  function PaginationRoot(props, ref) {\r\n    const { size = \"sm\", variant = \"outline\", getHref, ...rest } = props\r\n    return (\r\n      <RootPropsProvider\r\n        value={{ size, variantMap: variantMap[variant], getHref }}\r\n      >\r\n        <ChakraPagination.Root\r\n          ref={ref}\r\n          type={getHref ? \"link\" : \"button\"}\r\n          {...rest}\r\n        />\r\n      </RootPropsProvider>\r\n    )\r\n  },\r\n)\r\n\r\nexport const PaginationEllipsis = forwardRef<\r\n  HTMLDivElement,\r\n  ChakraPagination.EllipsisProps\r\n>(function PaginationEllipsis(props, ref) {\r\n  const { size, variantMap } = useRootProps()\r\n  return (\r\n    <ChakraPagination.Ellipsis ref={ref} {...props} asChild>\r\n      <Button as=\"span\" variant={variantMap.ellipsis} size={size}>\r\n        <HiMiniEllipsisHorizontal />\r\n      </Button>\r\n    </ChakraPagination.Ellipsis>\r\n  )\r\n})\r\n\r\nexport const PaginationItem = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.ItemProps\r\n>(function PaginationItem(props, ref) {\r\n  const { page } = usePaginationContext()\r\n  const { size, variantMap, getHref } = useRootProps()\r\n\r\n  const current = page === props.value\r\n  const variant = current ? variantMap.current : variantMap.default\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton href={getHref(props.value)} variant={variant} size={size}>\r\n        {props.value}\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.Item ref={ref} {...props} asChild>\r\n      <Button variant={variant} size={size}>\r\n        {props.value}\r\n      </Button>\r\n    </ChakraPagination.Item>\r\n  )\r\n})\r\n\r\nexport const PaginationPrevTrigger = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.PrevTriggerProps\r\n>(function PaginationPrevTrigger(props, ref) {\r\n  const { size, variantMap, getHref } = useRootProps()\r\n  const { previousPage } = usePaginationContext()\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton\r\n        href={previousPage != null ? getHref(previousPage) : undefined}\r\n        variant={variantMap.default}\r\n        size={size}\r\n      >\r\n        <HiChevronLeft />\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.PrevTrigger ref={ref} asChild {...props}>\r\n      <IconButton variant={variantMap.default} size={size}>\r\n        <HiChevronLeft />\r\n      </IconButton>\r\n    </ChakraPagination.PrevTrigger>\r\n  )\r\n})\r\n\r\nexport const PaginationNextTrigger = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.NextTriggerProps\r\n>(function PaginationNextTrigger(props, ref) {\r\n  const { size, variantMap, getHref } = useRootProps()\r\n  const { nextPage } = usePaginationContext()\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton\r\n        href={nextPage != null ? getHref(nextPage) : undefined}\r\n        variant={variantMap.default}\r\n        size={size}\r\n      >\r\n        <HiChevronRight />\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.NextTrigger ref={ref} asChild {...props}>\r\n      <IconButton variant={variantMap.default} size={size}>\r\n        <HiChevronRight />\r\n      </IconButton>\r\n    </ChakraPagination.NextTrigger>\r\n  )\r\n})\r\n\r\nexport const PaginationItems = (props: React.HTMLAttributes<HTMLElement>) => {\r\n  return (\r\n    <ChakraPagination.Context>\r\n      {({ pages }) =>\r\n        pages.map((page, index) => {\r\n          return page.type === \"ellipsis\" ? (\r\n            <PaginationEllipsis key={index} index={index} {...props} />\r\n          ) : (\r\n            <PaginationItem\r\n              key={index}\r\n              type=\"page\"\r\n              value={page.value}\r\n              {...props}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </ChakraPagination.Context>\r\n  )\r\n}\r\n\r\ninterface PageTextProps extends TextProps {\r\n  format?: \"short\" | \"compact\" | \"long\"\r\n}\r\n\r\nexport const PaginationPageText = forwardRef<\r\n  HTMLParagraphElement,\r\n  PageTextProps\r\n>(function PaginationPageText(props, ref) {\r\n  const { format = \"compact\", ...rest } = props\r\n  const { page, pages, pageRange, count } = usePaginationContext()\r\n  const content = useMemo(() => {\r\n    if (format === \"short\") return `${page} / ${pages.length}`\r\n    if (format === \"compact\") return `${page} of ${pages.length}`\r\n    return `${pageRange.start + 1} - ${pageRange.end} of ${count}`\r\n  }, [format, page, pages.length, pageRange, count])\r\n\r\n  return (\r\n    <Text fontWeight=\"medium\" ref={ref} {...rest}>\r\n      {content}\r\n    </Text>\r\n  )\r\n})\r\n"],"names":["RootPropsProvider","useRootProps","createContext","variantMap","PaginationRoot","forwardRef","props","ref","size","variant","getHref","rest","jsx","ChakraPagination","PaginationEllipsis","Button","HiMiniEllipsisHorizontal","PaginationItem","page","usePaginationContext","LinkButton","PaginationPrevTrigger","previousPage","HiChevronLeft","IconButton","PaginationNextTrigger","nextPage","HiChevronRight","PaginationItems","pages","index","PaginationPageText","format","pageRange","count","content","useMemo","Text"],"mappings":"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"}