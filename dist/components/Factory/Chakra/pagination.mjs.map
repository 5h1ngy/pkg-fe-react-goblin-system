{"version":3,"file":"pagination.mjs","sources":["../../../../src/components/Factory/Chakra/pagination.tsx"],"sourcesContent":["\r\n\r\nimport type { ButtonProps, TextProps } from \"@chakra-ui/react\"\r\nimport {\r\n  Button,\r\n  Pagination as ChakraPagination,\r\n  IconButton,\r\n  Text,\r\n  createContext,\r\n  usePaginationContext,\r\n} from \"@chakra-ui/react\"\r\nimport { forwardRef, useMemo } from \"react\"\r\nimport {\r\n  HiChevronLeft,\r\n  HiChevronRight,\r\n  HiMiniEllipsisHorizontal,\r\n} from \"react-icons/hi2\"\r\nimport { LinkButton } from \"./link-button\"\r\n\r\ninterface ButtonVariantMap {\r\n  current: ButtonProps[\"variant\"]\r\n  default: ButtonProps[\"variant\"]\r\n  ellipsis: ButtonProps[\"variant\"]\r\n}\r\n\r\ntype PaginationVariant = \"outline\" | \"solid\" | \"subtle\"\r\n\r\ninterface ButtonVariantContext {\r\n  size: ButtonProps[\"size\"]\r\n  variantMap: ButtonVariantMap\r\n  getHref?: (page: number) => string\r\n}\r\n\r\nconst [RootPropsProvider, useRootProps] = createContext<ButtonVariantContext>({\r\n  name: \"RootPropsProvider\",\r\n})\r\n\r\nexport interface PaginationRootProps\r\n  extends Omit<ChakraPagination.RootProps, \"type\"> {\r\n  size?: ButtonProps[\"size\"]\r\n  variant?: PaginationVariant\r\n  getHref?: (page: number) => string\r\n}\r\n\r\nconst variantMap: Record<PaginationVariant, ButtonVariantMap> = {\r\n  outline: { default: \"ghost\", ellipsis: \"plain\", current: \"outline\" },\r\n  solid: { default: \"outline\", ellipsis: \"outline\", current: \"solid\" },\r\n  subtle: { default: \"ghost\", ellipsis: \"plain\", current: \"subtle\" },\r\n}\r\n\r\nexport const PaginationRoot = forwardRef<HTMLDivElement, PaginationRootProps>(\r\n  function PaginationRoot(props, ref) {\r\n    const { size = \"sm\", variant = \"outline\", getHref, ...rest } = props\r\n    return (\r\n      <RootPropsProvider\r\n        value={{ size, variantMap: variantMap[variant], getHref }}\r\n      >\r\n        <ChakraPagination.Root\r\n          ref={ref}\r\n          type={getHref ? \"link\" : \"button\"}\r\n          {...rest}\r\n        />\r\n      </RootPropsProvider>\r\n    )\r\n  },\r\n)\r\n\r\nexport const PaginationEllipsis = forwardRef<\r\n  HTMLDivElement,\r\n  ChakraPagination.EllipsisProps\r\n>(function PaginationEllipsis(props, ref) {\r\n  const { size, variantMap } = useRootProps()\r\n  return (\r\n    <ChakraPagination.Ellipsis ref={ref} {...props} asChild>\r\n      <Button as=\"span\" variant={variantMap.ellipsis} size={size}>\r\n        <HiMiniEllipsisHorizontal />\r\n      </Button>\r\n    </ChakraPagination.Ellipsis>\r\n  )\r\n})\r\n\r\nexport const PaginationItem = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.ItemProps\r\n>(function PaginationItem(props, ref) {\r\n  const { page } = usePaginationContext()\r\n  const { size, variantMap, getHref } = useRootProps()\r\n\r\n  const current = page === props.value\r\n  const variant = current ? variantMap.current : variantMap.default\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton href={getHref(props.value)} variant={variant} size={size}>\r\n        {props.value}\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.Item ref={ref} {...props} asChild>\r\n      <Button variant={variant} size={size}>\r\n        {props.value}\r\n      </Button>\r\n    </ChakraPagination.Item>\r\n  )\r\n})\r\n\r\nexport const PaginationPrevTrigger = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.PrevTriggerProps\r\n>(function PaginationPrevTrigger(props, ref) {\r\n  const { size, variantMap, getHref } = useRootProps()\r\n  const { previousPage } = usePaginationContext()\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton\r\n        href={previousPage != null ? getHref(previousPage) : undefined}\r\n        variant={variantMap.default}\r\n        size={size}\r\n      >\r\n        <HiChevronLeft />\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.PrevTrigger ref={ref} asChild {...props}>\r\n      <IconButton variant={variantMap.default} size={size}>\r\n        <HiChevronLeft />\r\n      </IconButton>\r\n    </ChakraPagination.PrevTrigger>\r\n  )\r\n})\r\n\r\nexport const PaginationNextTrigger = forwardRef<\r\n  HTMLButtonElement,\r\n  ChakraPagination.NextTriggerProps\r\n>(function PaginationNextTrigger(props, ref) {\r\n  const { size, variantMap, getHref } = useRootProps()\r\n  const { nextPage } = usePaginationContext()\r\n\r\n  if (getHref) {\r\n    return (\r\n      <LinkButton\r\n        href={nextPage != null ? getHref(nextPage) : undefined}\r\n        variant={variantMap.default}\r\n        size={size}\r\n      >\r\n        <HiChevronRight />\r\n      </LinkButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChakraPagination.NextTrigger ref={ref} asChild {...props}>\r\n      <IconButton variant={variantMap.default} size={size}>\r\n        <HiChevronRight />\r\n      </IconButton>\r\n    </ChakraPagination.NextTrigger>\r\n  )\r\n})\r\n\r\nexport const PaginationItems = (props: React.HTMLAttributes<HTMLElement>) => {\r\n  return (\r\n    <ChakraPagination.Context>\r\n      {({ pages }) =>\r\n        pages.map((page, index) => {\r\n          return page.type === \"ellipsis\" ? (\r\n            <PaginationEllipsis key={index} index={index} {...props} />\r\n          ) : (\r\n            <PaginationItem\r\n              key={index}\r\n              type=\"page\"\r\n              value={page.value}\r\n              {...props}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </ChakraPagination.Context>\r\n  )\r\n}\r\n\r\ninterface PageTextProps extends TextProps {\r\n  format?: \"short\" | \"compact\" | \"long\"\r\n}\r\n\r\nexport const PaginationPageText = forwardRef<\r\n  HTMLParagraphElement,\r\n  PageTextProps\r\n>(function PaginationPageText(props, ref) {\r\n  const { format = \"compact\", ...rest } = props\r\n  const { page, pages, pageRange, count } = usePaginationContext()\r\n  const content = useMemo(() => {\r\n    if (format === \"short\") return `${page} / ${pages.length}`\r\n    if (format === \"compact\") return `${page} of ${pages.length}`\r\n    return `${pageRange.start + 1} - ${pageRange.end} of ${count}`\r\n  }, [format, page, pages.length, pageRange, count])\r\n\r\n  return (\r\n    <Text fontWeight=\"medium\" ref={ref} {...rest}>\r\n      {content}\r\n    </Text>\r\n  )\r\n})\r\n"],"names":["PaginationRoot","jsx","ChakraPagination","PaginationEllipsis","variantMap","PaginationItem","PaginationPrevTrigger","PaginationNextTrigger","PaginationPageText"],"mappings":"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"}