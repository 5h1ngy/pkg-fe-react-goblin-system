{"version":3,"file":"avatar.mjs","sources":["../../../../src/components/Factory/Chakra/avatar.tsx"],"sourcesContent":["\r\n\r\nimport type { GroupProps, SlotRecipeProps } from \"@chakra-ui/react\"\r\nimport { Avatar as ChakraAvatar, Group } from \"@chakra-ui/react\"\r\nimport { forwardRef } from \"react\"\r\n\r\ntype ImageProps = React.ImgHTMLAttributes<HTMLImageElement>\r\n\r\nexport interface AvatarProps extends ChakraAvatar.RootProps {\r\n  name?: string\r\n  src?: string\r\n  srcSet?: string\r\n  loading?: ImageProps[\"loading\"]\r\n  icon?: React.ReactElement\r\n  fallback?: React.ReactNode\r\n}\r\n\r\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>(\r\n  function Avatar(props, ref) {\r\n    const { name, src, srcSet, loading, icon, fallback, children, ...rest } =\r\n      props\r\n    return (\r\n      <ChakraAvatar.Root ref={ref} {...rest}>\r\n        <AvatarFallback name={name} icon={icon}>\r\n          {fallback}\r\n        </AvatarFallback>\r\n        <ChakraAvatar.Image src={src} srcSet={srcSet} loading={loading} />\r\n        {children}\r\n      </ChakraAvatar.Root>\r\n    )\r\n  },\r\n)\r\n\r\ninterface AvatarFallbackProps extends ChakraAvatar.FallbackProps {\r\n  name?: string\r\n  icon?: React.ReactElement\r\n}\r\n\r\nconst AvatarFallback = forwardRef<HTMLDivElement, AvatarFallbackProps>(\r\n  function AvatarFallback(props, ref) {\r\n    const { name, icon, children, ...rest } = props\r\n    return (\r\n      <ChakraAvatar.Fallback ref={ref} {...rest}>\r\n        {children}\r\n        {name != null && children == null && <>{getInitials(name)}</>}\r\n        {name == null && children == null && (\r\n          <ChakraAvatar.Icon asChild={!!icon}>{icon}</ChakraAvatar.Icon>\r\n        )}\r\n      </ChakraAvatar.Fallback>\r\n    )\r\n  },\r\n)\r\n\r\nfunction getInitials(name: string) {\r\n  const names = name.trim().split(\" \")\r\n  const firstName = names[0] != null ? names[0] : \"\"\r\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\r\n  return firstName && lastName\r\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\r\n    : firstName.charAt(0)\r\n}\r\n\r\ninterface AvatarGroupProps extends GroupProps, SlotRecipeProps<\"avatar\"> {}\r\n\r\nexport const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>(\r\n  function AvatarGroup(props, ref) {\r\n    const { size, variant, borderless, ...rest } = props\r\n    return (\r\n      <ChakraAvatar.PropsProvider value={{ size, variant, borderless }}>\r\n        <Group gap=\"0\" spaceX=\"-3\" ref={ref} {...rest} />\r\n      </ChakraAvatar.PropsProvider>\r\n    )\r\n  },\r\n)\r\n"],"names":["Avatar","ChakraAvatar","jsx","AvatarFallback","Fragment","AvatarGroup"],"mappings":";;;AAiBO,MAAM,SAAS;AAAA,EACpB,SAASA,QAAO,OAAO,KAAK;AACpB,UAAA,EAAE,MAAM,KAAK,QAAQ,SAAS,MAAM,UAAU,UAAU,GAAG,KAAA,IAC/D;AACF,kDACGC,SAAa,MAAb,EAAkB,KAAW,GAAG,MAC/B,UAAA;AAAA,MAACC,kCAAA,IAAA,gBAAA,EAAe,MAAY,MACzB,UACH,UAAA;AAAA,4CACCD,SAAa,OAAb,EAAmB,KAAU,QAAgB,SAAkB;AAAA,MAC/D;AAAA,IAAA,GACH;AAAA,EAAA;AAGN;AAOA,MAAM,iBAAiB;AAAA,EACrB,SAASE,gBAAe,OAAO,KAAK;AAClC,UAAM,EAAE,MAAM,MAAM,UAAU,GAAG,KAAS,IAAA;AAC1C,kDACGF,SAAa,UAAb,EAAsB,KAAW,GAAG,MAClC,UAAA;AAAA,MAAA;AAAA,MACA,QAAQ,QAAQ,YAAY,QAAWC,kCAAA,IAAAE,4BAAA,EAAA,UAAA,YAAY,IAAI,GAAE;AAAA,MACzD,QAAQ,QAAQ,YAAY,QAC1BF,kCAAA,IAAAD,SAAa,MAAb,EAAkB,SAAS,CAAC,CAAC,MAAO,UAAK,KAAA,CAAA;AAAA,IAAA,GAE9C;AAAA,EAAA;AAGN;AAEA,SAAS,YAAY,MAAc;AACjC,QAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG;AACnC,QAAM,YAAY,MAAM,CAAC,KAAK,OAAO,MAAM,CAAC,IAAI;AAC1C,QAAA,WAAW,MAAM,SAAS,IAAI,MAAM,MAAM,SAAS,CAAC,IAAI;AAC9D,SAAO,aAAa,WAChB,GAAG,UAAU,OAAO,CAAC,CAAC,GAAG,SAAS,OAAO,CAAC,CAAC,KAC3C,UAAU,OAAO,CAAC;AACxB;AAIO,MAAM,cAAc;AAAA,EACzB,SAASI,aAAY,OAAO,KAAK;AAC/B,UAAM,EAAE,MAAM,SAAS,YAAY,GAAG,KAAS,IAAA;AAC/C,iDACGJ,SAAa,eAAb,EAA2B,OAAO,EAAE,MAAM,SAAS,WAAA,GAClD,UAACC,kCAAA,IAAA,OAAA,EAAM,KAAI,KAAI,QAAO,MAAK,KAAW,GAAG,KAAM,CAAA,GACjD;AAAA,EAAA;AAGN;"}