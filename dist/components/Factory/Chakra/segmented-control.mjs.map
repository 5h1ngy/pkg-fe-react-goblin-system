{"version":3,"file":"segmented-control.mjs","sources":["../../../../src/components/Factory/Chakra/segmented-control.tsx"],"sourcesContent":["\r\n\r\nimport { For, SegmentGroup } from \"@chakra-ui/react\"\r\nimport { forwardRef, useMemo } from \"react\"\r\n\r\ninterface Item {\r\n  value: string\r\n  label: React.ReactNode\r\n  disabled?: boolean\r\n}\r\n\r\nexport interface SegmentedControlProps extends SegmentGroup.RootProps {\r\n  items: Array<string | Item>\r\n}\r\n\r\nfunction normalize(items: Array<string | Item>): Item[] {\r\n  return items.map((item) => {\r\n    if (typeof item === \"string\") return { value: item, label: item }\r\n    return item\r\n  })\r\n}\r\n\r\nexport const SegmentedControl = forwardRef<HTMLDivElement, SegmentedControlProps>(function SegmentedControl(props, ref) {\r\n  const { items, ...rest } = props\r\n  const data = useMemo(() => normalize(items), [items])\r\n\r\n  return (\r\n    <SegmentGroup.Root ref={ref} {...rest}>\r\n      <SegmentGroup.Indicator />\r\n      <For each={data}>\r\n        {(item) => (\r\n          <SegmentGroup.Item\r\n            key={item.value}\r\n            value={item.value}\r\n            disabled={item.disabled}\r\n          >\r\n            <SegmentGroup.ItemText>{item.label}</SegmentGroup.ItemText>\r\n            <SegmentGroup.ItemHiddenInput />\r\n          </SegmentGroup.Item>\r\n        )}\r\n      </For>\r\n    </SegmentGroup.Root>\r\n  )\r\n})\r\n"],"names":["normalize","items","item","SegmentedControl","forwardRef","props","ref","rest","data","useMemo","SegmentGroup","jsx","For","jsxs"],"mappings":";;;AAeA,SAASA,EAAUC,GAAqC;AAC/C,SAAAA,EAAM,IAAI,CAACC,MACZ,OAAOA,KAAS,WAAiB,EAAE,OAAOA,GAAM,OAAOA,EAAK,IACzDA,CACR;AACH;AAEO,MAAMC,IAAmBC,EAAkD,SAA0BC,GAAOC,GAAK;AACtH,QAAM,EAAE,OAAAL,GAAO,GAAGM,EAAA,IAASF,GACrBG,IAAOC,EAAQ,MAAMT,EAAUC,CAAK,GAAG,CAACA,CAAK,CAAC;AAEpD,gCACGS,EAAa,MAAb,EAAkB,KAAAJ,GAAW,GAAGC,GAC/B,UAAA;AAAA,IAACI,gBAAAA,MAAAD,EAAa,WAAb,EAAuB;AAAA,IACvBC,gBAAAA,EAAA,IAAAC,GAAA,EAAI,MAAMJ,GACR,WAACN,MACAW,gBAAAA,EAAA;AAAA,MAACH,EAAa;AAAA,MAAb;AAAA,QAEC,OAAOR,EAAK;AAAA,QACZ,UAAUA,EAAK;AAAA,QAEf,UAAA;AAAA,UAAAS,gBAAAA,EAAA,IAACD,EAAa,UAAb,EAAuB,UAAAR,EAAK,OAAM;AAAA,UACnCS,gBAAAA,MAACD,EAAa,iBAAb,CAA6B,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MALzBR,EAAK;AAAA,IAAA,EAQhB,CAAA;AAAA,EAAA,GACF;AAEJ,CAAC;"}