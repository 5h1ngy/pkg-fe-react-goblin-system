{"version":3,"file":"slider.mjs","sources":["../../../../src/components/Factory/Chakra/slider.tsx"],"sourcesContent":["import { Slider as ChakraSlider, HStack } from \"@chakra-ui/react\"\r\nimport { forwardRef } from \"react\"\r\n\r\nexport interface SliderProps extends ChakraSlider.RootProps {\r\n  marks?: Array<number | { value: number; label: React.ReactNode }>\r\n  label?: React.ReactNode\r\n  showValue?: boolean\r\n}\r\n\r\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>(\r\n  function Slider(props, ref) {\r\n    const { marks: marksProp, label, showValue, ...rest } = props\r\n    const value = props.defaultValue ?? props.value\r\n\r\n    const marks = marksProp?.map((mark) => {\r\n      if (typeof mark === \"number\") return { value: mark, label: undefined }\r\n      return mark\r\n    })\r\n\r\n    const hasMarkLabel = !!marks?.some((mark) => mark.label)\r\n\r\n    return (\r\n      <ChakraSlider.Root ref={ref} thumbAlignment=\"center\" {...rest}>\r\n        {label && !showValue && (\r\n          <ChakraSlider.Label fontWeight=\"medium\">{label}</ChakraSlider.Label>\r\n        )}\r\n        {label && showValue && (\r\n          <HStack justify=\"space-between\">\r\n            <ChakraSlider.Label fontWeight=\"medium\">{label}</ChakraSlider.Label>\r\n            <ChakraSlider.ValueText />\r\n          </HStack>\r\n        )}\r\n        <ChakraSlider.Control mb={hasMarkLabel ? \"4\" : undefined}>\r\n          <ChakraSlider.Track>\r\n            <ChakraSlider.Range />\r\n          </ChakraSlider.Track>\r\n          {value?.map((_, index) => (\r\n            <ChakraSlider.Thumb key={index} index={index}>\r\n              <ChakraSlider.HiddenInput />\r\n            </ChakraSlider.Thumb>\r\n          ))}\r\n        </ChakraSlider.Control>\r\n        {marks?.length && (\r\n          <ChakraSlider.MarkerGroup>\r\n            {marks.map((mark, index) => {\r\n              const value = typeof mark === \"number\" ? mark : mark.value\r\n              const label = typeof mark === \"number\" ? undefined : mark.label\r\n              return (\r\n                <ChakraSlider.Marker key={index} value={value}>\r\n                  <ChakraSlider.MarkerIndicator />\r\n                  {label}\r\n                </ChakraSlider.Marker>\r\n              )\r\n            })}\r\n          </ChakraSlider.MarkerGroup>\r\n        )}\r\n      </ChakraSlider.Root>\r\n    )\r\n  },\r\n)\r\n"],"names":["Slider","jsxs","ChakraSlider","jsx","value","label"],"mappings":";;;AASO,MAAM,SAAS;AAAA,EACpB,SAASA,QAAO,OAAO,KAAK;AAC1B,UAAM,EAAE,OAAO,WAAW,OAAO,WAAW,GAAG,SAAS;AAClD,UAAA,QAAQ,MAAM,gBAAgB,MAAM;AAE1C,UAAM,QAAQ,uCAAW,IAAI,CAAC,SAAS;AACjC,UAAA,OAAO,SAAS,SAAU,QAAO,EAAE,OAAO,MAAM,OAAO,OAAU;AAC9D,aAAA;AAAA,IAAA;AAGH,UAAA,eAAe,CAAC,EAAC,+BAAO,KAAK,CAAC,SAAS,KAAK;AAGhD,WAAAC,kCAAA,KAACC,SAAa,MAAb,EAAkB,KAAU,gBAAe,UAAU,GAAG,MACtD,UAAA;AAAA,MAAS,SAAA,CAAC,aACRC,kCAAA,IAAAD,SAAa,OAAb,EAAmB,YAAW,UAAU,UAAM,OAAA;AAAA,MAEhD,SAAS,aACPD,uCAAA,QAAA,EAAO,SAAQ,iBACd,UAAA;AAAA,QAAAE,kCAAA,IAACD,SAAa,OAAb,EAAmB,YAAW,UAAU,UAAM,OAAA;AAAA,QAC/CC,sCAACD,SAAa,WAAb,CAAuB,CAAA;AAAA,MAAA,GAC1B;AAAA,6CAEDA,SAAa,SAAb,EAAqB,IAAI,eAAe,MAAM,QAC7C,UAAA;AAAA,QAAAC,sCAACD,SAAa,OAAb,EACC,gDAACA,SAAa,OAAb,CAAmB,CAAA,GACtB;AAAA,QACC,+BAAO,IAAI,CAAC,GAAG,gDACbA,SAAa,OAAb,EAA+B,OAC9B,gDAACA,SAAa,aAAb,CAAyB,CAAA,EAAA,GADH,KAEzB;AAAA,MACD,GACH;AAAA,OACC,+BAAO,WACNC,sCAACD,SAAa,aAAb,EACE,UAAM,MAAA,IAAI,CAAC,MAAM,UAAU;AAC1B,cAAME,SAAQ,OAAO,SAAS,WAAW,OAAO,KAAK;AACrD,cAAMC,SAAQ,OAAO,SAAS,WAAW,SAAY,KAAK;AAC1D,eACGJ,kCAAAA,KAAAC,SAAa,QAAb,EAAgC,OAAOE,QACtC,UAAA;AAAA,UAACD,sCAAAD,SAAa,iBAAb,EAA6B;AAAA,UAC7BG;AAAAA,QAAA,EAAA,GAFuB,KAG1B;AAAA,MAAA,CAEH,EACH,CAAA;AAAA,IAAA,GAEJ;AAAA,EAAA;AAGN;"}