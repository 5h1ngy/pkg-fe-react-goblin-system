{"version":3,"file":"slider.mjs","sources":["../../../../src/components/Factory/Chakra/slider.tsx"],"sourcesContent":["import { Slider as ChakraSlider, HStack } from \"@chakra-ui/react\"\r\nimport { forwardRef } from \"react\"\r\n\r\nexport interface SliderProps extends ChakraSlider.RootProps {\r\n  marks?: Array<number | { value: number; label: React.ReactNode }>\r\n  label?: React.ReactNode\r\n  showValue?: boolean\r\n}\r\n\r\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>(\r\n  function Slider(props, ref) {\r\n    const { marks: marksProp, label, showValue, ...rest } = props\r\n    const value = props.defaultValue ?? props.value\r\n\r\n    const marks = marksProp?.map((mark) => {\r\n      if (typeof mark === \"number\") return { value: mark, label: undefined }\r\n      return mark\r\n    })\r\n\r\n    const hasMarkLabel = !!marks?.some((mark) => mark.label)\r\n\r\n    return (\r\n      <ChakraSlider.Root ref={ref} thumbAlignment=\"center\" {...rest}>\r\n        {label && !showValue && (\r\n          <ChakraSlider.Label fontWeight=\"medium\">{label}</ChakraSlider.Label>\r\n        )}\r\n        {label && showValue && (\r\n          <HStack justify=\"space-between\">\r\n            <ChakraSlider.Label fontWeight=\"medium\">{label}</ChakraSlider.Label>\r\n            <ChakraSlider.ValueText />\r\n          </HStack>\r\n        )}\r\n        <ChakraSlider.Control mb={hasMarkLabel ? \"4\" : undefined}>\r\n          <ChakraSlider.Track>\r\n            <ChakraSlider.Range />\r\n          </ChakraSlider.Track>\r\n          {value?.map((_, index) => (\r\n            <ChakraSlider.Thumb key={index} index={index}>\r\n              <ChakraSlider.HiddenInput />\r\n            </ChakraSlider.Thumb>\r\n          ))}\r\n        </ChakraSlider.Control>\r\n        {marks?.length && (\r\n          <ChakraSlider.MarkerGroup>\r\n            {marks.map((mark, index) => {\r\n              const value = typeof mark === \"number\" ? mark : mark.value\r\n              const label = typeof mark === \"number\" ? undefined : mark.label\r\n              return (\r\n                <ChakraSlider.Marker key={index} value={value}>\r\n                  <ChakraSlider.MarkerIndicator />\r\n                  {label}\r\n                </ChakraSlider.Marker>\r\n              )\r\n            })}\r\n          </ChakraSlider.MarkerGroup>\r\n        )}\r\n      </ChakraSlider.Root>\r\n    )\r\n  },\r\n)\r\n"],"names":["Slider","forwardRef","props","ref","marksProp","label","showValue","rest","value","marks","mark","hasMarkLabel","jsxs","ChakraSlider","jsx","HStack","_","index"],"mappings":";;;AASO,MAAMA,IAASC;AAAA,EACpB,SAAgBC,GAAOC,GAAK;AAC1B,UAAM,EAAE,OAAOC,GAAW,OAAAC,GAAO,WAAAC,GAAW,GAAGC,MAASL,GAClDM,IAAQN,EAAM,gBAAgBA,EAAM,OAEpCO,IAAQL,KAAA,gBAAAA,EAAW,IAAI,CAACM,MACxB,OAAOA,KAAS,WAAiB,EAAE,OAAOA,GAAM,OAAO,OAAU,IAC9DA,IAGHC,IAAe,CAAC,EAACF,KAAA,QAAAA,EAAO,KAAK,CAACC,MAASA,EAAK;AAGhD,WAAAE,gBAAAA,EAAA,KAACC,EAAa,MAAb,EAAkB,KAAAV,GAAU,gBAAe,UAAU,GAAGI,GACtD,UAAA;AAAA,MAASF,KAAA,CAACC,KACRQ,gBAAAA,EAAA,IAAAD,EAAa,OAAb,EAAmB,YAAW,UAAU,UAAMR,GAAA;AAAA,MAEhDA,KAASC,KACPM,gBAAAA,OAAAG,GAAA,EAAO,SAAQ,iBACd,UAAA;AAAA,QAAAD,gBAAAA,EAAA,IAACD,EAAa,OAAb,EAAmB,YAAW,UAAU,UAAMR,GAAA;AAAA,QAC/CS,gBAAAA,MAACD,EAAa,WAAb,CAAuB,CAAA;AAAA,MAAA,GAC1B;AAAA,6BAEDA,EAAa,SAAb,EAAqB,IAAIF,IAAe,MAAM,QAC7C,UAAA;AAAA,QAAAG,gBAAAA,MAACD,EAAa,OAAb,EACC,gCAACA,EAAa,OAAb,CAAmB,CAAA,GACtB;AAAA,QACCL,KAAA,gBAAAA,EAAO,IAAI,CAACQ,GAAGC,4BACbJ,EAAa,OAAb,EAA+B,OAAAI,GAC9B,gCAACJ,EAAa,aAAb,CAAyB,CAAA,EAAA,GADHI,CAEzB;AAAA,MACD,GACH;AAAA,OACCR,KAAA,gBAAAA,EAAO,WACNK,gBAAAA,MAACD,EAAa,aAAb,EACE,UAAMJ,EAAA,IAAI,CAACC,GAAMO,MAAU;AAC1B,cAAMT,IAAQ,OAAOE,KAAS,WAAWA,IAAOA,EAAK,OAC/CL,IAAQ,OAAOK,KAAS,WAAW,SAAYA,EAAK;AAC1D,eACGE,gBAAAA,EAAAA,KAAAC,EAAa,QAAb,EAAgC,OAAOL,GACtC,UAAA;AAAA,UAACM,gBAAAA,MAAAD,EAAa,iBAAb,EAA6B;AAAA,UAC7BR;AAAAA,QAAA,EAAA,GAFuBY,CAG1B;AAAA,MAAA,CAEH,EACH,CAAA;AAAA,IAAA,GAEJ;AAAA,EAAA;AAGN;"}